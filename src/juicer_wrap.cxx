/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.36
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<typename T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; }
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


 /* Put header files here or function declarations like below */
#include "FrontEnd.h"
#include "MonophoneLookup.h"
#include "DecVocabulary.h"
#include "DecPhoneInfo.h"
#include "DecLexInfo.h"
#include "Models.h"
#include "Histogram.h"
#include "BlockMemPool.h"
#include "LogFile.h"
#include "WordPairLM.h"
#include "ARPALM.h"
#include "string_stuff.h"
#include "WFSTNetwork.h"
#include "WFSTGramGen.h"
#include "WFSTCDGen.h"
#include "WFSTLexGen.h"
#include "WFSTHMMGen.h"
#include "WFSTLattice.h"
#include "DecHypHistPool.h"
#include "WFSTDecoder.h"
#include "WFSTDecoderLite.h"
#include "DecoderSingleTest.h"
#include "DecoderBatchTest.h"
#include "WFSTModel.h"

#ifdef WITH_ONTHEFLY
#include "WFSTLatticeOnTheFly.h"
#include "WFSTOnTheFlyDecoder.h"
#include "WFSTModelOnTheFly.h"
#endif

#ifdef HAVE_HTKLIB
#include "HModels.h"
#endif

#include "HTKModels.h"
#include "HTKFlatModels.h"
#include "htkparse.h"
#include "WFSTGeneral.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1FrontEnd(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  Juicer::FrontEndFormat arg2 ;
  Juicer::FrontEnd *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  arg2 = (Juicer::FrontEndFormat)jarg2;
  result = (Juicer::FrontEnd *)new Juicer::FrontEnd(arg1,arg2);
  *(Juicer::FrontEnd **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1FrontEnd(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1GetArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  float **arg2 = 0 ;
  int arg3 ;
  float *temp2 = 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  temp2 = *(float **)&jarg2;
  arg2 = &temp2;
  arg3 = (int)jarg3;
  result = (bool)(arg1)->GetArray(*arg2,arg3);
  jresult = (jboolean)result;
  //printf(".%d.", result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1SetSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetSource(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1TimeStamp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  long arg2 ;
  long long result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  arg2 = (long)jarg2;
  result = (long long)(arg1)->TimeStamp(arg2);
  jresult = (jlong)result;
  //printf(".%d.", result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1GetSpeakerID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->GetSpeakerID(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  //printf(".%d.", result);
  return jresult;
}

#ifdef HAVE_HTKLIB

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1isHTKLibSource_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->isHTKLibSource = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1isHTKLibSource_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  result = (bool) ((arg1)->isHTKLibSource);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


#ifdef USE_EXTRAS

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1HTKLIBModels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  HModels *arg2 = (HModels *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  arg2 = *(HModels **)&jarg2;
  if (arg1) (arg1)->HTKLIBModels = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1HTKLIBModels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  HModels *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  result = (HModels *) ((arg1)->HTKLIBModels);
  *(HModels **)&jresult = result;
  printf(".%d.", result); return jresult;
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1useHModels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->useHModels = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FrontEnd_1useHModels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::FrontEnd *arg1 = (Juicer::FrontEnd *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FrontEnd **)&jarg1;
  result = (bool) ((arg1)->useHModels);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


#endif

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1chr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  char arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->chr = arg2;
}


SWIGEXPORT jchar JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1chr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  char result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  result = (char) ((arg1)->chr);
  jresult = (jchar)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1monophone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->monophone = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1monophone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  result = (int) ((arg1)->monophone);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1isTemp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->isTemp = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1isTemp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  result = (bool) ((arg1)->isTemp);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1nextSib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nextSib = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1nextSib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  result = (int) ((arg1)->nextSib);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1firstChild_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->firstChild = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookupNode_1firstChild_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  result = (int) ((arg1)->firstChild);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1MonophoneLookupNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::MonophoneLookupNode *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::MonophoneLookupNode *)new Juicer::MonophoneLookupNode();
  *(Juicer::MonophoneLookupNode **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1MonophoneLookupNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::MonophoneLookupNode *arg1 = (Juicer::MonophoneLookupNode *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::MonophoneLookupNode **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1MonophoneLookup_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::MonophoneLookup *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::MonophoneLookup *)new Juicer::MonophoneLookup();
  *(Juicer::MonophoneLookup **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1MonophoneLookup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Juicer::MonophoneLookup *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::MonophoneLookup *)new Juicer::MonophoneLookup((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(Juicer::MonophoneLookup **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1MonophoneLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getIndex((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1getIndexWithAdd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getIndexWithAdd((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1getString(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getString(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1getNumMonophones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  result = (int)(arg1)->getNumMonophones();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1getSilMonophone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  result = (int)(arg1)->getSilMonophone();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1getPauseMonophone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  result = (int)(arg1)->getPauseMonophone();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1writeBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->writeBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1writeBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1readBinary_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->readBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MonophoneLookup_1readBinary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1sepChar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  char arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->sepChar = arg2;
}


SWIGEXPORT jchar JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1sepChar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  char result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  result = (char) ((arg1)->sepChar);
  jresult = (jchar)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1monoInd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->monoInd = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1monoInd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  result = (int) ((arg1)->monoInd);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1modelLookupInd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->modelLookupInd = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1modelLookupInd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  result = (int) ((arg1)->modelLookupInd);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1nextSib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nextSib = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1nextSib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  result = (int) ((arg1)->nextSib);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1firstChild_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->firstChild = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookupNode_1firstChild_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  result = (int) ((arg1)->firstChild);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1PhoneLookupNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::PhoneLookupNode *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::PhoneLookupNode *)new Juicer::PhoneLookupNode();
  *(Juicer::PhoneLookupNode **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1PhoneLookupNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::PhoneLookupNode *arg1 = (Juicer::PhoneLookupNode *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::PhoneLookupNode **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1PhoneLookup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Juicer::PhoneLookup *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::PhoneLookup *)new Juicer::PhoneLookup(arg1,(char const *)arg2,(char const *)arg3);
  *(Juicer::PhoneLookup **)&jresult = result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1PhoneLookup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  Juicer::PhoneLookup *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (Juicer::PhoneLookup *)new Juicer::PhoneLookup((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  *(Juicer::PhoneLookup **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1PhoneLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1addModelInd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  result = (int)(arg1)->addModelInd((char const *)arg2,arg3);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getModelInd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getModelInd((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getNumModels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  result = (int)(arg1)->getNumModels();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getNumPhones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  result = (int)(arg1)->getNumPhones();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getMaxCD(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  result = (int)(arg1)->getMaxCD();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getModelStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getModelStr(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1verifyAllModels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  (arg1)->verifyAllModels();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getAllModelInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3) {
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  int **arg2 = (int **) 0 ;
  int *arg3 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  arg2 = *(int ***)&jarg2;
  arg3 = *(int **)&jarg3;
  (arg1)->getAllModelInfo(arg2,arg3);
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1haveCISilence(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  result = (bool)(arg1)->haveCISilence();
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getCISilenceModelInd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  result = (int)(arg1)->getCISilenceModelInd();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1haveCIPause(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  result = (bool)(arg1)->haveCIPause();
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_PhoneLookup_1getCIPauseModelInd(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::PhoneLookup *arg1 = (Juicer::PhoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::PhoneLookup **)&jarg1;
  result = (int)(arg1)->getCIPauseModelInd();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1nWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1nWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int) ((arg1)->nWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  char **arg2 = (char **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = *(char ***)&jarg2;
  if (arg1) (arg1)->words = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  char **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (char **) ((arg1)->words);
  *(char ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1nNormWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nNormWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1nNormWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int) ((arg1)->nNormWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1normWordInds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->normWordInds = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1normWordInds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int *) ((arg1)->normWordInds);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1specWordChar_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  char arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->specWordChar = arg2;
}


SWIGEXPORT jchar JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1specWordChar_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  char result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (char) ((arg1)->specWordChar);
  jresult = (jchar)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1nSpecWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nSpecWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1nSpecWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int) ((arg1)->nSpecWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1specWordInds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->specWordInds = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1specWordInds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int *) ((arg1)->specWordInds);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1sentStartIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->sentStartIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1sentStartIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int) ((arg1)->sentStartIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1sentEndIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->sentEndIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1sentEndIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int) ((arg1)->sentEndIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1silIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->silIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1silIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (int) ((arg1)->silIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1fromBinFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->fromBinFile = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1fromBinFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (bool) ((arg1)->fromBinFile);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecVocabulary_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecVocabulary *)new Juicer::DecVocabulary();
  *(Juicer::DecVocabulary **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecVocabulary_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (char)jarg2;
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (Juicer::DecVocabulary *)new Juicer::DecVocabulary((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  *(Juicer::DecVocabulary **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecVocabulary_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2, jstring jarg3, jstring jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (char)jarg2;
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  result = (Juicer::DecVocabulary *)new Juicer::DecVocabulary((char const *)arg1,arg2,(char const *)arg3,(char const *)arg4);
  *(Juicer::DecVocabulary **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecVocabulary_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  char *arg3 = (char *) 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (char)jarg2;
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::DecVocabulary *)new Juicer::DecVocabulary((char const *)arg1,arg2,(char const *)arg3);
  *(Juicer::DecVocabulary **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecVocabulary_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jchar jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char arg2 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = (char)jarg2;
  result = (Juicer::DecVocabulary *)new Juicer::DecVocabulary((char const *)arg1,arg2);
  *(Juicer::DecVocabulary **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecVocabulary_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Juicer::DecVocabulary *)new Juicer::DecVocabulary((char const *)arg1);
  *(Juicer::DecVocabulary **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecVocabulary(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1getWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getWord(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1getNumPronuns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getNumPronuns(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1isSpecial(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->isSpecial(arg2);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1getIgnoreLM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  int arg2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->getIgnoreLM(arg2);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1getIndex_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = (int)jarg3;
  result = (int)(arg1)->getIndex((char const *)arg2,arg3);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1getIndex_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getIndex((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->writeBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->readBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecVocabulary_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CD_1TYPE_1NONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Juicer::CDType result;

  (void)jenv;
  (void)jcls;
  result = (Juicer::CDType)Juicer::CD_TYPE_NONE;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPL_1STATE_1UNINITIALISED_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Juicer::CDPhoneLookupState result;

  (void)jenv;
  (void)jcls;
  result = (Juicer::CDPhoneLookupState)Juicer::CDPL_STATE_UNINITIALISED;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1CDPhoneLookup_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  Juicer::CDPhoneLookup *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  result = (Juicer::CDPhoneLookup *)new Juicer::CDPhoneLookup(arg1);
  *(Juicer::CDPhoneLookup **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1CDPhoneLookup_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  Juicer::CDType arg2 ;
  char *arg3 = (char *) 0 ;
  Juicer::CDPhoneLookup *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = (Juicer::CDType)jarg2;
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::CDPhoneLookup *)new Juicer::CDPhoneLookup(arg1,arg2,(char const *)arg3);
  *(Juicer::CDPhoneLookup **)&jresult = result;
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1CDPhoneLookup(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1getMonophoneIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getMonophoneIndex(arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1getCDPhoneIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = *(int **)&jarg4;
  arg5 = (int)jarg5;
  arg6 = *(int **)&jarg6;
  result = (int)(arg1)->getCDPhoneIndex(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1getMonophoneStr(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getMonophoneStr(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1getNumMonophones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  result = (int)(arg1)->getNumMonophones();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1splitIntoMonophones_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4) {
  jboolean jresult = 0 ;
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = *(int **)&jarg3;
  arg4 = *(int **)&jarg4;
  result = (bool)(arg1)->splitIntoMonophones(arg2,arg3,arg4);
  jresult = (jboolean)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1splitIntoMonophones_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jlong jarg6, jlong jarg7) {
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int *arg7 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = *(int **)&jarg3;
  arg4 = *(int **)&jarg4;
  arg5 = *(int **)&jarg5;
  arg6 = *(int **)&jarg6;
  arg7 = *(int **)&jarg7;
  (arg1)->splitIntoMonophones(arg2,arg3,arg4,arg5,arg6,arg7);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1addCDPhone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jint jarg3) {
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3;
  (arg1)->addCDPhone(arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1extractAndCheckMonophones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->extractAndCheckMonophones(arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->writeBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CDPhoneLookup_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::CDPhoneLookup *arg1 = (Juicer::CDPhoneLookup *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::CDPhoneLookup **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->readBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1nPhones_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nPhones = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1nPhones_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (int) ((arg1)->nPhones);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1phoneNames_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  char **arg2 = (char **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = *(char ***)&jarg2;
  if (arg1) (arg1)->phoneNames = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1phoneNames_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  char **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (char **) ((arg1)->phoneNames);
  *(char ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1silIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->silIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1silIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (int) ((arg1)->silIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1silMonophoneIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->silMonophoneIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1silMonophoneIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (int) ((arg1)->silMonophoneIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1pauseIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->pauseIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1pauseIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (int) ((arg1)->pauseIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1fromBinFile_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->fromBinFile = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1fromBinFile_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (bool) ((arg1)->fromBinFile);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1cdType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  Juicer::CDType arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (Juicer::CDType)jarg2;
  if (arg1) (arg1)->cdType = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1cdType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  Juicer::CDType result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (Juicer::CDType) ((arg1)->cdType);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecPhoneInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecPhoneInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecPhoneInfo *)new Juicer::DecPhoneInfo();
  *(Juicer::DecPhoneInfo **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecPhoneInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::CDType arg5 ;
  char *arg6 = (char *) 0 ;
  Juicer::DecPhoneInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (Juicer::CDType)jarg5;
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (Juicer::DecPhoneInfo *)new Juicer::DecPhoneInfo((char const *)arg1,arg2,arg3,arg4,arg5,(char const *)arg6);
  *(Juicer::DecPhoneInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecPhoneInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1getPhone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getPhone(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getIndex((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1getMonophoneIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getMonophoneIndex((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1getMonophone(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getMonophone(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1getCDPhoneIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jint jarg5, jlong jarg6) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;
  int arg3 ;
  int *arg4 = (int *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = *(int **)&jarg4;
  arg5 = (int)jarg5;
  arg6 = *(int **)&jarg6;
  result = (int)(arg1)->getCDPhoneIndex(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1getTriModelIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (int)(arg1)->getTriModelIndex(arg2,arg3,arg4);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->writeBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->readBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1testCDPhoneLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  (arg1)->testCDPhoneLookup();
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecPhoneInfo_1getNumMonophones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecPhoneInfo *arg1 = (Juicer::DecPhoneInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecPhoneInfo **)&jarg1;
  result = (int)(arg1)->getNumMonophones();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1nPhones_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nPhones = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1nPhones_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  result = (int) ((arg1)->nPhones);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1phones_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->phones = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1phones_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  result = (int *) ((arg1)->phones);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1monophones_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->monophones = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1monophones_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  result = (int *) ((arg1)->monophones);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1logPrior_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->logPrior = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1logPrior_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  result = (float) ((arg1)->logPrior);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1vocabIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->vocabIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfoEntry_1vocabIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  result = (int) ((arg1)->vocabIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfoEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecLexInfoEntry *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecLexInfoEntry *)new Juicer::DecLexInfoEntry();
  *(Juicer::DecLexInfoEntry **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecLexInfoEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecLexInfoEntry *arg1 = (Juicer::DecLexInfoEntry *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecLexInfoEntry **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VocToLexMapEntry_1nPronuns_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::VocToLexMapEntry *arg1 = (Juicer::VocToLexMapEntry *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VocToLexMapEntry **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nPronuns = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VocToLexMapEntry_1nPronuns_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::VocToLexMapEntry *arg1 = (Juicer::VocToLexMapEntry *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VocToLexMapEntry **)&jarg1;
  result = (int) ((arg1)->nPronuns);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VocToLexMapEntry_1pronuns_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::VocToLexMapEntry *arg1 = (Juicer::VocToLexMapEntry *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VocToLexMapEntry **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->pronuns = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VocToLexMapEntry_1pronuns_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::VocToLexMapEntry *arg1 = (Juicer::VocToLexMapEntry *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VocToLexMapEntry **)&jarg1;
  result = (int *) ((arg1)->pronuns);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1VocToLexMapEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::VocToLexMapEntry *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::VocToLexMapEntry *)new Juicer::VocToLexMapEntry();
  *(Juicer::VocToLexMapEntry **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1VocToLexMapEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::VocToLexMapEntry *arg1 = (Juicer::VocToLexMapEntry *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::VocToLexMapEntry **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1nEntries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nEntries = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1nEntries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (int) ((arg1)->nEntries);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1entries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::DecLexInfoEntry *arg2 = (Juicer::DecLexInfoEntry *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = *(Juicer::DecLexInfoEntry **)&jarg2;
  if (arg1) (arg1)->entries = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1entries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::DecLexInfoEntry *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (Juicer::DecLexInfoEntry *) ((arg1)->entries);
  *(Juicer::DecLexInfoEntry **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1sentStartIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->sentStartIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1sentStartIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (int) ((arg1)->sentStartIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1sentEndIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->sentEndIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1sentEndIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (int) ((arg1)->sentEndIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1silIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->silIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1silIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (int) ((arg1)->silIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1phoneInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::DecPhoneInfo *arg2 = (Juicer::DecPhoneInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = *(Juicer::DecPhoneInfo **)&jarg2;
  if (arg1) (arg1)->phoneInfo = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1phoneInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::DecPhoneInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (Juicer::DecPhoneInfo *) ((arg1)->phoneInfo);
  *(Juicer::DecPhoneInfo **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1vocabulary_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::DecVocabulary *arg2 = (Juicer::DecVocabulary *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = *(Juicer::DecVocabulary **)&jarg2;
  if (arg1) (arg1)->vocabulary = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1vocabulary_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (Juicer::DecVocabulary *) ((arg1)->vocabulary);
  *(Juicer::DecVocabulary **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1vocabToLexMap_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::VocToLexMapEntry *arg2 = (Juicer::VocToLexMapEntry *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = *(Juicer::VocToLexMapEntry **)&jarg2;
  if (arg1) (arg1)->vocabToLexMap = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1vocabToLexMap_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::VocToLexMapEntry *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (Juicer::VocToLexMapEntry *) ((arg1)->vocabToLexMap);
  *(Juicer::VocToLexMapEntry **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1cdType_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::CDType arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = (Juicer::CDType)jarg2;
  if (arg1) (arg1)->cdType = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1cdType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::CDType result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (Juicer::CDType) ((arg1)->cdType);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1rescoreMode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->rescoreMode = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1rescoreMode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (bool) ((arg1)->rescoreMode);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jint jarg10, jboolean jarg11) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::CDType arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  Juicer::CDType arg10 ;
  bool arg11 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (Juicer::CDType)jarg5;
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  arg10 = (Juicer::CDType)jarg10;
  arg11 = jarg11 ? true : false;
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10,arg11);
  *(Juicer::DecLexInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9, jint jarg10) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::CDType arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  Juicer::CDType arg10 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (Juicer::CDType)jarg5;
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  arg10 = (Juicer::CDType)jarg10;
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(Juicer::DecLexInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jstring jarg9) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::CDType arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  char *arg9 = (char *) 0 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (Juicer::CDType)jarg5;
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = 0;
  if (jarg9) {
    arg9 = (char *)jenv->GetStringUTFChars(jarg9, 0);
    if (!arg9) return 0;
  }
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(Juicer::DecLexInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg9) jenv->ReleaseStringUTFChars(jarg9, (const char *)arg9);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::CDType arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (Juicer::CDType)jarg5;
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  *(Juicer::DecLexInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::CDType arg5 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (Juicer::CDType)jarg5;
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo((char const *)arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(Juicer::DecLexInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jint jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  Juicer::CDType arg5 ;
  char *arg6 = (char *) 0 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = (Juicer::CDType)jarg5;
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo((char const *)arg1,arg2,arg3,arg4,arg5,arg6);
  *(Juicer::DecLexInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo((char const *)arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  *(Juicer::DecLexInfo **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecLexInfo_1_1SWIG_17(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecLexInfo *)new Juicer::DecLexInfo();
  *(Juicer::DecLexInfo **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecLexInfo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1monoToCDPhones(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::DecLexInfoEntry *arg2 = (Juicer::DecLexInfoEntry *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = *(Juicer::DecLexInfoEntry **)&jarg2;
  (arg1)->monoToCDPhones(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1writeWFST(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeWFST((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1getMonoLookup(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::MonophoneLookup *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (Juicer::MonophoneLookup *)(arg1)->getMonoLookup();
  *(Juicer::MonophoneLookup **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecLexInfo_1normalisePronuns(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  (arg1)->normalisePronuns();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SEIndex_1start_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Juicer::SEIndex *arg1 = (Juicer::SEIndex *) 0 ;
  short arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::SEIndex **)&jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->start = arg2;
}


SWIGEXPORT jshort JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SEIndex_1start_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Juicer::SEIndex *arg1 = (Juicer::SEIndex *) 0 ;
  short result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::SEIndex **)&jarg1;
  result = (short) ((arg1)->start);
  jresult = (jshort)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SEIndex_1end_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Juicer::SEIndex *arg1 = (Juicer::SEIndex *) 0 ;
  short arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::SEIndex **)&jarg1;
  arg2 = (short)jarg2;
  if (arg1) (arg1)->end = arg2;
}


SWIGEXPORT jshort JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SEIndex_1end_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Juicer::SEIndex *arg1 = (Juicer::SEIndex *) 0 ;
  short result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::SEIndex **)&jarg1;
  result = (short) ((arg1)->end);
  jresult = (jshort)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1SEIndex(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::SEIndex *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::SEIndex *)new Juicer::SEIndex();
  *(Juicer::SEIndex **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1SEIndex(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::SEIndex *arg1 = (Juicer::SEIndex *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::SEIndex **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1Models(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::IModels **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1Load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4;
  (arg1)->Load((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1Load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->Load((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1Load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->Load((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->output((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1newFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(float ***)&jarg3;
  arg4 = (int)jarg4;
  (arg1)->newFrame(arg2,(float /*const*/ **)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1setBlockSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->setBlockSize(arg2);
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1calcOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (float)(arg1)->calcOutput(arg2,arg3);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1calcOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->calcOutput(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getNumHMMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  result = (int)(arg1)->getNumHMMs();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getCurrFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  result = (int)(arg1)->getCurrFrame();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getHMMName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getHMMName(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getInputVecSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  result = (int)(arg1)->getInputVecSize();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getNumStates(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->getNumSuccessors(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (int)(arg1)->getSuccessor(arg2,arg3,arg4);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getSuccessorLogProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jfloat jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (float)(arg1)->getSuccessorLogProb(arg2,arg3,arg4);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getTeeLogProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->getTeeLogProb(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getTransMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float **)(arg1)->getTransMat(arg2);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Models_1getSEIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  int arg2 ;
  Juicer::SEIndex *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (Juicer::SEIndex *)(arg1)->getSEIndex(arg2);
  *(Juicer::SEIndex **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1min_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->min = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1min_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  result = (int) ((arg1)->min);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1max_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->max = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1max_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  result = (int) ((arg1)->max);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1cnt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->cnt = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1cnt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  result = (int) ((arg1)->cnt);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1best_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->best = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1best_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  result = (float) ((arg1)->best);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1worst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->worst = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HistogramBin_1worst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  result = (float) ((arg1)->worst);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HistogramBin(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::HistogramBin *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::HistogramBin *)new Juicer::HistogramBin();
  *(Juicer::HistogramBin **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HistogramBin(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::HistogramBin *arg1 = (Juicer::HistogramBin *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::HistogramBin **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1count_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->count = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1count_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  result = (int) ((arg1)->count);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1bestScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->bestScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1bestScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  result = (float) ((arg1)->bestScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1worstScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->worstScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1worstScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  result = (float) ((arg1)->worstScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1Histogram(JNIEnv *jenv, jclass jcls, jint jarg1, jfloat jarg2, jfloat jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  float arg2 ;
  float arg3 ;
  Juicer::Histogram *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  result = (Juicer::Histogram *)new Juicer::Histogram(arg1,arg2,arg3);
  *(Juicer::Histogram **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1Histogram(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::Histogram **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1addScore_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2, jfloat jarg3) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  float arg2 ;
  float arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  arg2 = (float)jarg2;
  arg3 = (float)jarg3;
  (arg1)->addScore(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1addScore_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  arg2 = (float)jarg2;
  (arg1)->addScore(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  (arg1)->reset();
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1calcThresh(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->calcThresh(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Histogram_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::Histogram *arg1 = (Juicer::Histogram *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Histogram **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1BlockMemPool(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  Juicer::BlockMemPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  arg2 = (int)jarg2;
  result = (Juicer::BlockMemPool *)new Juicer::BlockMemPool(arg1,arg2);
  *(Juicer::BlockMemPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1BlockMemPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::BlockMemPool *arg1 = (Juicer::BlockMemPool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::BlockMemPool **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_BlockMemPool_1getElem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::BlockMemPool *arg1 = (Juicer::BlockMemPool *) 0 ;
  void *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::BlockMemPool **)&jarg1;
  result = (void *)(arg1)->getElem();
  *(void **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_BlockMemPool_1returnElem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::BlockMemPool *arg1 = (Juicer::BlockMemPool *) 0 ;
  void *arg2 = (void *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::BlockMemPool **)&jarg1;
  arg2 = *(void **)&jarg2;
  (arg1)->returnElem(arg2);
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_BlockMemPool_1isAllFreed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::BlockMemPool *arg1 = (Juicer::BlockMemPool *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::BlockMemPool **)&jarg1;
  result = (bool)(arg1)->isAllFreed();
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_BlockMemPool_1malloc(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::BlockMemPool *arg1 = (Juicer::BlockMemPool *) 0 ;
  void *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::BlockMemPool **)&jarg1;
  result = (void *)(arg1)->malloc();
  *(void **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_BlockMemPool_1free(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::BlockMemPool *arg1 = (Juicer::BlockMemPool *) 0 ;
  void *arg2 = (void *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::BlockMemPool **)&jarg1;
  arg2 = *(void **)&jarg2;
  (arg1)->free(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_BlockMemPool_1purge_1memory(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::BlockMemPool *arg1 = (Juicer::BlockMemPool *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::BlockMemPool **)&jarg1;
  (arg1)->purge_memory();
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1LogFile(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::LogFile *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::LogFile *)new Juicer::LogFile();
  *(Juicer::LogFile **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1LogFile(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::LogFile *arg1 = (Juicer::LogFile *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::LogFile **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LogFile_1open(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Juicer::LogFile::open((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LogFile_1close(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  Juicer::LogFile::close();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LogFile_1puts(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Juicer::LogFile::puts((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LogFile_1date(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Juicer::LogFile::date((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LogFile_1hostname(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Juicer::LogFile::hostname((char const *)arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LogFile_1printf(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Juicer::LogFile::printf((char const *)arg1,arg2);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LogFile_1getFD(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  FILE *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (FILE *)Juicer::LogFile::getFD();
  *(FILE **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLMEntry_1word_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WordPairLMEntry *arg1 = (Juicer::WordPairLMEntry *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLMEntry **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->word = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLMEntry_1word_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WordPairLMEntry *arg1 = (Juicer::WordPairLMEntry *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLMEntry **)&jarg1;
  result = (int) ((arg1)->word);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLMEntry_1nSucWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WordPairLMEntry *arg1 = (Juicer::WordPairLMEntry *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLMEntry **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nSucWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLMEntry_1nSucWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WordPairLMEntry *arg1 = (Juicer::WordPairLMEntry *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLMEntry **)&jarg1;
  result = (int) ((arg1)->nSucWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLMEntry_1sucWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WordPairLMEntry *arg1 = (Juicer::WordPairLMEntry *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLMEntry **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->sucWords = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLMEntry_1sucWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WordPairLMEntry *arg1 = (Juicer::WordPairLMEntry *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLMEntry **)&jarg1;
  result = (int *) ((arg1)->sucWords);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WordPairLMEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WordPairLMEntry *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WordPairLMEntry *)new Juicer::WordPairLMEntry();
  *(Juicer::WordPairLMEntry **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WordPairLMEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WordPairLMEntry *arg1 = (Juicer::WordPairLMEntry *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WordPairLMEntry **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WordPairLM(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::DecVocabulary *arg2 = (Juicer::DecVocabulary *) 0 ;
  Juicer::WordPairLM *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(Juicer::DecVocabulary **)&jarg2;
  result = (Juicer::WordPairLM *)new Juicer::WordPairLM((char const *)arg1,arg2);
  *(Juicer::WordPairLM **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WordPairLM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WordPairLM *arg1 = (Juicer::WordPairLM *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WordPairLM **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLM_1outputText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WordPairLM *arg1 = (Juicer::WordPairLM *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLM **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->outputText(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLM_1outputText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WordPairLM *arg1 = (Juicer::WordPairLM *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLM **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLM_1getNumSucWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::WordPairLM *arg1 = (Juicer::WordPairLM *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLM **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getNumSucWords(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WordPairLM_1getSucWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::WordPairLM *arg1 = (Juicer::WordPairLM *) 0 ;
  int arg2 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WordPairLM **)&jarg1;
  arg2 = (int)jarg2;
  result = (int *)(arg1)->getSucWords(arg2);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALMEntry_1log_1prob_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::ARPALMEntry *arg1 = (Juicer::ARPALMEntry *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALMEntry **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->log_prob = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALMEntry_1log_1prob_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::ARPALMEntry *arg1 = (Juicer::ARPALMEntry *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALMEntry **)&jarg1;
  result = (float) ((arg1)->log_prob);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALMEntry_1log_1bo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::ARPALMEntry *arg1 = (Juicer::ARPALMEntry *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALMEntry **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->log_bo = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALMEntry_1log_1bo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::ARPALMEntry *arg1 = (Juicer::ARPALMEntry *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALMEntry **)&jarg1;
  result = (float) ((arg1)->log_bo);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALMEntry_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::ARPALMEntry *arg1 = (Juicer::ARPALMEntry *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALMEntry **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->words = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALMEntry_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::ARPALMEntry *arg1 = (Juicer::ARPALMEntry *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALMEntry **)&jarg1;
  result = (int *) ((arg1)->words);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1ARPALMEntry(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::ARPALMEntry *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::ARPALMEntry *)new Juicer::ARPALMEntry();
  *(Juicer::ARPALMEntry **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1ARPALMEntry(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::ARPALMEntry *arg1 = (Juicer::ARPALMEntry *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::ARPALMEntry **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1vocab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  Juicer::DecVocabulary *arg2 = (Juicer::DecVocabulary *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = *(Juicer::DecVocabulary **)&jarg2;
  if (arg1) (arg1)->vocab = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1vocab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (Juicer::DecVocabulary *) ((arg1)->vocab);
  *(Juicer::DecVocabulary **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1order_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->order = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1order_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (int) ((arg1)->order);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1entries_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  Juicer::ARPALMEntry **arg2 = (Juicer::ARPALMEntry **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = *(Juicer::ARPALMEntry ***)&jarg2;
  if (arg1) (arg1)->entries = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1entries_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  Juicer::ARPALMEntry **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (Juicer::ARPALMEntry **) ((arg1)->entries);
  *(Juicer::ARPALMEntry ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1n_1ngrams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->n_ngrams = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1n_1ngrams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (int *) ((arg1)->n_ngrams);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1unk_1wrd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->unk_wrd) delete [] arg1->unk_wrd;
    if (arg2) {
      arg1->unk_wrd = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->unk_wrd, (const char *)arg2);
    } else {
      arg1->unk_wrd = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1unk_1wrd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (char *) ((arg1)->unk_wrd);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1unk_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->unk_id = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1unk_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (int) ((arg1)->unk_id);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1n_1unk_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_unk_words = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1n_1unk_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (int) ((arg1)->n_unk_words);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1unk_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->unk_words = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1unk_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  result = (int *) ((arg1)->unk_words);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1ARPALM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  Juicer::ARPALM *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (Juicer::ARPALM *)new Juicer::ARPALM(arg1);
  *(Juicer::ARPALM **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1ARPALM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1, jlong jarg2, jobject jarg2_, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::DecVocabulary *arg2 = (Juicer::DecVocabulary *) 0 ;
  char *arg3 = (char *) 0 ;
  Juicer::ARPALM *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = *(Juicer::DecVocabulary **)&jarg2;
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::ARPALM *)new Juicer::ARPALM((char const *)arg1,arg2,(char const *)arg3);
  *(Juicer::ARPALM **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1ARPALM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1readARPA(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readARPA((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1calcUnkWords(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  (arg1)->calcUnkWords();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1printWarning(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  (arg1)->printWarning();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1allocateEntries(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  (arg1)->allocateEntries();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_ARPALM_1Normalise(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::ARPALM *arg1 = (Juicer::ARPALM *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::ARPALM **)&jarg1;
  (arg1)->Normalise();
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_myfgets(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  FILE *arg1 = (FILE *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1;
  result = (char *)Juicer::myfgets(arg1);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_strtoupper(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  char *arg1 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  Juicer::strtoupper(arg1);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_byteRev32(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1;
  Juicer::byteRev32(arg1);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_byteRev16(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  void *arg1 = (void *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1;
  Juicer::byteRev16(arg1);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  result = (int) ((arg1)->id);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1toState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->toState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1toState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  result = (int) ((arg1)->toState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1weight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1weight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  result = (float) ((arg1)->weight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1inLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->inLabel = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1inLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  result = (int) ((arg1)->inLabel);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1outLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->outLabel = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1outLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  result = (int) ((arg1)->outLabel);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1hook_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  void *arg2 = (void *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  arg2 = *(void **)&jarg2;
  if (arg1) (arg1)->hook = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTTransition_1hook_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;
  void *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  result = (void *) ((arg1)->hook);
  *(void **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTTransition(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTTransition *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTTransition *)new Juicer::WFSTTransition();
  *(Juicer::WFSTTransition **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTTransition(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTTransition *arg1 = (Juicer::WFSTTransition *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTTransition **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1trans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->trans = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1trans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  result = (int *) ((arg1)->trans);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->label = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  result = (int) ((arg1)->label);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1finalInd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->finalInd = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1finalInd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  result = (int) ((arg1)->finalInd);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1nTrans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nTrans = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTState_1nTrans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  result = (int) ((arg1)->nTrans);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTState *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTState *)new Juicer::WFSTState();
  *(Juicer::WFSTState **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTState *arg1 = (Juicer::WFSTState *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTState **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTFinalState_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTFinalState *arg1 = (Juicer::WFSTFinalState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTFinalState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTFinalState_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTFinalState *arg1 = (Juicer::WFSTFinalState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTFinalState **)&jarg1;
  result = (int) ((arg1)->id);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTFinalState_1weight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTFinalState *arg1 = (Juicer::WFSTFinalState *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTFinalState **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTFinalState_1weight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTFinalState *arg1 = (Juicer::WFSTFinalState *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTFinalState **)&jarg1;
  result = (float) ((arg1)->weight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTFinalState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTFinalState *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTFinalState *)new Juicer::WFSTFinalState();
  *(Juicer::WFSTFinalState **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTFinalState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTFinalState *arg1 = (Juicer::WFSTFinalState *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTFinalState **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTAlphabet_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTAlphabet *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTAlphabet *)new Juicer::WFSTAlphabet();
  *(Juicer::WFSTAlphabet **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTAlphabet_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::WFSTAlphabet *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Juicer::WFSTAlphabet *)new Juicer::WFSTAlphabet((char const *)arg1);
  *(Juicer::WFSTAlphabet **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTAlphabet(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  delete arg1;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1getLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getLabel(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1getIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getIndex((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1isAuxiliary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  int arg2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->isAuxiliary(arg2);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1getMaxLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  result = (int)(arg1)->getMaxLabel();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1getNumLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  result = (int)(arg1)->getNumLabels();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1getNumAuxSyms(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  result = (int)(arg1)->getNumAuxSyms();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  FILE *arg2 = (FILE *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  arg3 = jarg3 ? true : false;
  (arg1)->write(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->writeBinary(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTAlphabet_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTAlphabet *arg1 = (Juicer::WFSTAlphabet *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTAlphabet **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->readBinary(arg2);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork();
  *(Juicer::WFSTNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1, jfloat jarg2) {
  jlong jresult = 0 ;
  float arg1 ;
  float arg2 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  arg2 = (float)jarg2;
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork(arg1,arg2);
  *(Juicer::WFSTNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jfloat jarg4, jfloat jarg5, jint jarg6) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  Juicer::RemoveAuxOption arg6 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (Juicer::RemoveAuxOption)jarg6;
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5,arg6);
  *(Juicer::WFSTNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jfloat jarg4, jfloat jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  float arg5 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  *(Juicer::WFSTNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4;
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(Juicer::WFSTNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(Juicer::WFSTNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork((char const *)arg1,(char const *)arg2);
  *(Juicer::WFSTNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNetwork_1_1SWIG_17(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Juicer::WFSTNetwork *)new Juicer::WFSTNetwork((char const *)arg1);
  *(Juicer::WFSTNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTNetwork(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getInitState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int)(arg1)->getInitState();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getTransitions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jlong jarg4) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;
  int *arg3 = (int *) 0 ;
  Juicer::WFSTTransition **arg4 = (Juicer::WFSTTransition **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  arg3 = *(int **)&jarg3;
  arg4 = *(Juicer::WFSTTransition ***)&jarg4;
  (arg1)->getTransitions(arg2,arg3,arg4);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getTransitions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;
  Juicer::WFSTTransition **arg3 = (Juicer::WFSTTransition **) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  arg3 = *(Juicer::WFSTTransition ***)&jarg3;
  result = (int)(arg1)->getTransitions(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getMaxOutTransitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int)(arg1)->getMaxOutTransitions();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getNumTransitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int)(arg1)->getNumTransitions();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int)(arg1)->getNumStates();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getWordEndMarker(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int)(arg1)->getWordEndMarker();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getNumTransitionsOfOneState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getNumTransitionsOfOneState(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getNumOutLabels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int)(arg1)->getNumOutLabels();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1isFinalState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  result = (bool)(arg1)->isFinalState(arg2);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getFinalStateWeight_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->getFinalStateWeight(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getTransitions_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3) {
  jlong jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;
  int *arg3 = (int *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  arg3 = *(int **)&jarg3;
  result = (int *)(arg1)->getTransitions((Juicer::WFSTTransition const *)arg2,arg3);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getOneTransition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  Juicer::WFSTTransition *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  result = (Juicer::WFSTTransition *)(arg1)->getOneTransition(arg2);
  *(Juicer::WFSTTransition **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getInfoOfOneTransition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jlong jarg4, jlong jarg5, jlong jarg6) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  int arg3 ;
  float *arg4 = (float *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = *(float **)&jarg4;
  arg5 = *(int **)&jarg5;
  arg6 = *(int **)&jarg6;
  result = (int)(arg1)->getInfoOfOneTransition(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getInLabelOfOneTransition(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->getInLabelOfOneTransition(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getTransID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->getTransID(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1transGoesToFinalState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  result = (bool)(arg1)->transGoesToFinalState(arg2);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1getFinalStateWeight_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jfloat jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  result = (float)(arg1)->getFinalStateWeight(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1outputText_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->outputText(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1outputText_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1generateSequences_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = jarg3 ? true : false;
  (arg1)->generateSequences(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1generateSequences_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->generateSequences(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1generateSequences_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  (arg1)->generateSequences();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1writeFSM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1printNumOutTransitions(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->printNumOutTransitions((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1silMarker_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->silMarker = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1silMarker_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int) ((arg1)->silMarker);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1spMarker_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->spMarker = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1spMarker_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  result = (int) ((arg1)->spMarker);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNetwork_1resetTransitionHooks(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  (arg1)->resetTransitionHooks();
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLabelPushingNetwork_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTLabelPushingNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTLabelPushingNetwork *)new Juicer::WFSTLabelPushingNetwork();
  *(Juicer::WFSTLabelPushingNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLabelPushingNetwork_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  Juicer::WFSTLabelPushingNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  result = (Juicer::WFSTLabelPushingNetwork *)new Juicer::WFSTLabelPushingNetwork(arg1);
  *(Juicer::WFSTLabelPushingNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLabelPushingNetwork_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jfloat jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  Juicer::RemoveAuxOption arg5 ;
  Juicer::WFSTLabelPushingNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4;
  arg5 = (Juicer::RemoveAuxOption)jarg5;
  result = (Juicer::WFSTLabelPushingNetwork *)new Juicer::WFSTLabelPushingNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  *(Juicer::WFSTLabelPushingNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLabelPushingNetwork_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  Juicer::WFSTLabelPushingNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4;
  result = (Juicer::WFSTLabelPushingNetwork *)new Juicer::WFSTLabelPushingNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(Juicer::WFSTLabelPushingNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLabelPushingNetwork_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Juicer::WFSTLabelPushingNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::WFSTLabelPushingNetwork *)new Juicer::WFSTLabelPushingNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(Juicer::WFSTLabelPushingNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLabelPushingNetwork_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Juicer::WFSTLabelPushingNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Juicer::WFSTLabelPushingNetwork *)new Juicer::WFSTLabelPushingNetwork((char const *)arg1,(char const *)arg2);
  *(Juicer::WFSTLabelPushingNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLabelPushingNetwork_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::WFSTLabelPushingNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Juicer::WFSTLabelPushingNetwork *)new Juicer::WFSTLabelPushingNetwork((char const *)arg1);
  *(Juicer::WFSTLabelPushingNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTLabelPushingNetwork(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTLabelPushingNetwork *arg1 = (Juicer::WFSTLabelPushingNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLabelPushingNetwork_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTLabelPushingNetwork *arg1 = (Juicer::WFSTLabelPushingNetwork *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLabelPushingNetwork_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTLabelPushingNetwork *arg1 = (Juicer::WFSTLabelPushingNetwork *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLabelPushingNetwork_1getOneLabelSet(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::WFSTLabelPushingNetwork *arg1 = (Juicer::WFSTLabelPushingNetwork *) 0 ;
  int arg2 ;
  Juicer::WFSTLabelPushingNetwork::LabelSet *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
  arg2 = (int)jarg2;
  result = (Juicer::WFSTLabelPushingNetwork::LabelSet *)(arg1)->getOneLabelSet(arg2);
  *(Juicer::WFSTLabelPushingNetwork::LabelSet **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLabelPushingNetwork_1getLabelArray(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTLabelPushingNetwork *arg1 = (Juicer::WFSTLabelPushingNetwork *) 0 ;
  Juicer::WFSTLabelPushingNetwork::LabelSet **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
  result = (Juicer::WFSTLabelPushingNetwork::LabelSet **)(arg1)->getLabelArray();
  *(Juicer::WFSTLabelPushingNetwork::LabelSet ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLabelPushingNetwork_1getMaxOutLabels_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jint jresult = 0 ;
  Juicer::WFSTLabelPushingNetwork *arg1 = (Juicer::WFSTLabelPushingNetwork *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)(arg1)->getMaxOutLabels((char const *)arg2);
  jresult = (jint)result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLabelPushingNetwork_1getMaxOutLabels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLabelPushingNetwork *arg1 = (Juicer::WFSTLabelPushingNetwork *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
  result = (int)(arg1)->getMaxOutLabels();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTSortedInLabelNetwork_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTSortedInLabelNetwork *)new Juicer::WFSTSortedInLabelNetwork();
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTSortedInLabelNetwork_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jfloat jarg1) {
  jlong jresult = 0 ;
  float arg1 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (float)jarg1;
  result = (Juicer::WFSTSortedInLabelNetwork *)new Juicer::WFSTSortedInLabelNetwork(arg1);
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTSortedInLabelNetwork_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jfloat jarg4, jint jarg5) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  Juicer::RemoveAuxOption arg5 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4;
  arg5 = (Juicer::RemoveAuxOption)jarg5;
  result = (Juicer::WFSTSortedInLabelNetwork *)new Juicer::WFSTSortedInLabelNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4,arg5);
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTSortedInLabelNetwork_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  float arg4 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = (float)jarg4;
  result = (Juicer::WFSTSortedInLabelNetwork *)new Juicer::WFSTSortedInLabelNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTSortedInLabelNetwork_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (Juicer::WFSTSortedInLabelNetwork *)new Juicer::WFSTSortedInLabelNetwork((char const *)arg1,(char const *)arg2,(char const *)arg3);
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTSortedInLabelNetwork_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (Juicer::WFSTSortedInLabelNetwork *)new Juicer::WFSTSortedInLabelNetwork((char const *)arg1,(char const *)arg2);
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTSortedInLabelNetwork_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Juicer::WFSTSortedInLabelNetwork *)new Juicer::WFSTSortedInLabelNetwork((char const *)arg1);
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTSortedInLabelNetwork(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTSortedInLabelNetwork *arg1 = (Juicer::WFSTSortedInLabelNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTSortedInLabelNetwork **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTSortedInLabelNetwork_1getStatesOnEpsPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jint jarg4, jlong jarg5, jlong jarg6, jlong jarg7, jlong jarg8, jint jarg9) {
  Juicer::WFSTSortedInLabelNetwork *arg1 = (Juicer::WFSTSortedInLabelNetwork *) 0 ;
  int arg2 ;
  float arg3 ;
  int arg4 ;
  int *arg5 = (int *) 0 ;
  float *arg6 = (float *) 0 ;
  int *arg7 = (int *) 0 ;
  int *arg8 = (int *) 0 ;
  int arg9 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTSortedInLabelNetwork **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (float)jarg3;
  arg4 = (int)jarg4;
  arg5 = *(int **)&jarg5;
  arg6 = *(float **)&jarg6;
  arg7 = *(int **)&jarg7;
  arg8 = *(int **)&jarg8;
  arg9 = (int)jarg9;
  (arg1)->getStatesOnEpsPath(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTSortedInLabelNetwork_1getNextStateOnEpsPath(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Juicer::WFSTSortedInLabelNetwork *arg1 = (Juicer::WFSTSortedInLabelNetwork *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTSortedInLabelNetwork **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(float **)&jarg3;
  result = (int)(arg1)->getNextStateOnEpsPath(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTSortedInLabelNetwork_1writeBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTSortedInLabelNetwork *arg1 = (Juicer::WFSTSortedInLabelNetwork *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTSortedInLabelNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTSortedInLabelNetwork_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTSortedInLabelNetwork *arg1 = (Juicer::WFSTSortedInLabelNetwork *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTSortedInLabelNetwork **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFST_1GRAM_1TYPE_1WORDLOOP_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Juicer::WFSTGramType result;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTGramType)Juicer::WFST_GRAM_TYPE_WORDLOOP;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1word_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->word = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1word_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  result = (int) ((arg1)->word);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  result = (int) ((arg1)->state);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1nextSib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nextSib = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1nextSib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  result = (int) ((arg1)->nextSib);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1firstChild_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->firstChild = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1firstChild_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  result = (int) ((arg1)->firstChild);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1nOut_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nOut = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1nOut_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  result = (int) ((arg1)->nOut);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1nIn_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nIn = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramSMNode_1nIn_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  result = (int) ((arg1)->nIn);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNGramSMNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTNGramSMNode *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTNGramSMNode *)new Juicer::WFSTNGramSMNode();
  *(Juicer::WFSTNGramSMNode **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTNGramSMNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTNGramSMNode *arg1 = (Juicer::WFSTNGramSMNode *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTNGramSMNode **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTNGramStateManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  Juicer::WFSTNGramStateManager *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  result = (Juicer::WFSTNGramStateManager *)new Juicer::WFSTNGramStateManager(arg1);
  *(Juicer::WFSTNGramStateManager **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTNGramStateManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1getWFSTState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4, jlong jarg5, jboolean jarg6) {
  jint jresult = 0 ;
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool arg4 ;
  bool *arg5 = (bool *) 0 ;
  bool arg6 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(int **)&jarg3;
  arg4 = jarg4 ? true : false;
  arg5 = *(bool **)&jarg5;
  arg6 = jarg6 ? true : false;
  result = (int)(arg1)->getWFSTState(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1getWFSTState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4, jlong jarg5) {
  jint jresult = 0 ;
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool arg4 ;
  bool *arg5 = (bool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(int **)&jarg3;
  arg4 = jarg4 ? true : false;
  arg5 = *(bool **)&jarg5;
  result = (int)(arg1)->getWFSTState(arg2,arg3,arg4,arg5);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1getWFSTState_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(int **)&jarg3;
  arg4 = jarg4 ? true : false;
  result = (int)(arg1)->getWFSTState(arg2,arg3,arg4);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1lookupWFSTState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(int **)&jarg3;
  result = (int)(arg1)->lookupWFSTState(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1getInitState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  result = (int)(arg1)->getInitState();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  result = (int)(arg1)->getNumStates();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1getEpsState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  result = (int)(arg1)->getEpsState();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTNGramStateManager_1outputNonAccessible(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTNGramStateManager *arg1 = (Juicer::WFSTNGramStateManager *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTNGramStateManager **)&jarg1;
  (arg1)->outputNonAccessible();
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTGramGen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5, jstring jarg6) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  Juicer::WFSTGramType arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  Juicer::WFSTGramGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (Juicer::WFSTGramType)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  result = (Juicer::WFSTGramGen *)new Juicer::WFSTGramGen(arg1,arg2,arg3,arg4,(char const *)arg5,(char const *)arg6);
  *(Juicer::WFSTGramGen **)&jresult = result;
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTGramGen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4, jstring jarg5) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  Juicer::WFSTGramType arg2 ;
  float arg3 ;
  float arg4 ;
  char *arg5 = (char *) 0 ;
  Juicer::WFSTGramGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (Juicer::WFSTGramType)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  result = (Juicer::WFSTGramGen *)new Juicer::WFSTGramGen(arg1,arg2,arg3,arg4,(char const *)arg5);
  *(Juicer::WFSTGramGen **)&jresult = result;
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTGramGen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3, jfloat jarg4) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  Juicer::WFSTGramType arg2 ;
  float arg3 ;
  float arg4 ;
  Juicer::WFSTGramGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = (Juicer::WFSTGramType)jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  result = (Juicer::WFSTGramGen *)new Juicer::WFSTGramGen(arg1,arg2,arg3,arg4);
  *(Juicer::WFSTGramGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTGramGen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTGramGen *arg1 = (Juicer::WFSTGramGen *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTGramGen **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTGramGen_1writeFSM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jboolean jarg5, jboolean jarg6, jboolean jarg7) {
  Juicer::WFSTGramGen *arg1 = (Juicer::WFSTGramGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;
  bool arg7 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTGramGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = jarg5 ? true : false;
  arg6 = jarg6 ? true : false;
  arg7 = jarg7 ? true : false;
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6,arg7);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTGramGen_1writeFSM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jboolean jarg5, jboolean jarg6) {
  Juicer::WFSTGramGen *arg1 = (Juicer::WFSTGramGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTGramGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = jarg5 ? true : false;
  arg6 = jarg6 ? true : false;
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTGramGen_1writeFSM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jboolean jarg5) {
  Juicer::WFSTGramGen *arg1 = (Juicer::WFSTGramGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTGramGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = jarg5 ? true : false;
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTGramGen_1writeFSM_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Juicer::WFSTGramGen *arg1 = (Juicer::WFSTGramGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTGramGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTGramGen_1getPhiLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTGramGen *arg1 = (Juicer::WFSTGramGen *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTGramGen **)&jarg1;
  result = (int)(arg1)->getPhiLabel();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFST_1CD_1TYPE_1MONOPHONE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Juicer::WFSTCDType result;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTCDType)Juicer::WFST_CD_TYPE_MONOPHONE;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1monophone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->monophone = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1monophone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  result = (int) ((arg1)->monophone);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  result = (int) ((arg1)->state);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1nextSib_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nextSib = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1nextSib_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  result = (int) ((arg1)->nextSib);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1firstChild_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->firstChild = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDSMNode_1firstChild_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  result = (int) ((arg1)->firstChild);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTCDSMNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTCDSMNode *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTCDSMNode *)new Juicer::WFSTCDSMNode();
  *(Juicer::WFSTCDSMNode **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTCDSMNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTCDSMNode *arg1 = (Juicer::WFSTCDSMNode *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTCDSMNode **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTCDStateManager(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::MonophoneLookup *arg1 = (Juicer::MonophoneLookup *) 0 ;
  int arg2 ;
  Juicer::WFSTCDStateManager *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MonophoneLookup **)&jarg1;
  arg2 = (int)jarg2;
  result = (Juicer::WFSTCDStateManager *)new Juicer::WFSTCDStateManager(arg1,arg2);
  *(Juicer::WFSTCDStateManager **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTCDStateManager(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTCDStateManager *arg1 = (Juicer::WFSTCDStateManager *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTCDStateManager **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDStateManager_1getWFSTState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4, jlong jarg5) {
  jint jresult = 0 ;
  Juicer::WFSTCDStateManager *arg1 = (Juicer::WFSTCDStateManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool arg4 ;
  bool *arg5 = (bool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDStateManager **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(int **)&jarg3;
  arg4 = jarg4 ? true : false;
  arg5 = *(bool **)&jarg5;
  result = (int)(arg1)->getWFSTState(arg2,arg3,arg4,arg5);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDStateManager_1getWFSTState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jboolean jarg4) {
  jint jresult = 0 ;
  Juicer::WFSTCDStateManager *arg1 = (Juicer::WFSTCDStateManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  bool arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDStateManager **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(int **)&jarg3;
  arg4 = jarg4 ? true : false;
  result = (int)(arg1)->getWFSTState(arg2,arg3,arg4);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDStateManager_1getWFSTState_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  jint jresult = 0 ;
  Juicer::WFSTCDStateManager *arg1 = (Juicer::WFSTCDStateManager *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDStateManager **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(int **)&jarg3;
  result = (int)(arg1)->getWFSTState(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDStateManager_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTCDStateManager *arg1 = (Juicer::WFSTCDStateManager *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDStateManager **)&jarg1;
  result = (int)(arg1)->getNumStates();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDStateManager_1getEpsState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTCDStateManager *arg1 = (Juicer::WFSTCDStateManager *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDStateManager **)&jarg1;
  result = (int)(arg1)->getEpsState();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDStateManager_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTCDStateManager *arg1 = (Juicer::WFSTCDStateManager *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDStateManager **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTCDGen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8, jint jarg9) {
  jlong jresult = 0 ;
  Juicer::WFSTCDType arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  int arg9 ;
  Juicer::WFSTCDGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (Juicer::WFSTCDType)jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (int)jarg9;
  result = (Juicer::WFSTCDGen *)new Juicer::WFSTCDGen(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8,arg9);
  *(Juicer::WFSTCDGen **)&jresult = result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTCDGen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7, jstring jarg8) {
  jlong jresult = 0 ;
  Juicer::WFSTCDType arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  char *arg8 = (char *) 0 ;
  Juicer::WFSTCDGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (Juicer::WFSTCDType)jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  result = (Juicer::WFSTCDGen *)new Juicer::WFSTCDGen(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7,(char const *)arg8);
  *(Juicer::WFSTCDGen **)&jresult = result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTCDGen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5, jstring jarg6, jstring jarg7) {
  jlong jresult = 0 ;
  Juicer::WFSTCDType arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  char *arg6 = (char *) 0 ;
  char *arg7 = (char *) 0 ;
  Juicer::WFSTCDGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (Juicer::WFSTCDType)jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return 0;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = 0;
  if (jarg6) {
    arg6 = (char *)jenv->GetStringUTFChars(jarg6, 0);
    if (!arg6) return 0;
  }
  arg7 = 0;
  if (jarg7) {
    arg7 = (char *)jenv->GetStringUTFChars(jarg7, 0);
    if (!arg7) return 0;
  }
  result = (Juicer::WFSTCDGen *)new Juicer::WFSTCDGen(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5,(char const *)arg6,(char const *)arg7);
  *(Juicer::WFSTCDGen **)&jresult = result;
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg6) jenv->ReleaseStringUTFChars(jarg6, (const char *)arg6);
  if (arg7) jenv->ReleaseStringUTFChars(jarg7, (const char *)arg7);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTCDGen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTCDGen *arg1 = (Juicer::WFSTCDGen *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTCDGen **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDGen_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTCDGen *arg1 = (Juicer::WFSTCDGen *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDGen **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTCDGen_1writeFSM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jstring jarg5) {
  Juicer::WFSTCDGen *arg1 = (Juicer::WFSTCDGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTCDGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return ;
  }
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4,(char const *)arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1phone_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->phone = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1phone_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (int) ((arg1)->phone);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1nWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1nWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (int) ((arg1)->nWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1nWordsAlloc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nWordsAlloc = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1nWordsAlloc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (int) ((arg1)->nWordsAlloc);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1words_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->words = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1words_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (int *) ((arg1)->words);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1wordProbs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->wordProbs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1wordProbs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (float *) ((arg1)->wordProbs);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1nSucs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nSucs = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1nSucs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (int) ((arg1)->nSucs);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1firstSuc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->firstSuc = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1firstSuc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (int) ((arg1)->firstSuc);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexNode_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  result = (int) ((arg1)->next);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexNode(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTLexNode *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTLexNode *)new Juicer::WFSTLexNode();
  *(Juicer::WFSTLexNode **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTLexNode(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTLexNode *arg1 = (Juicer::WFSTLexNode *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTLexNode **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexGen_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jfloat jarg6, jboolean jarg7) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  bool arg7 ;
  Juicer::WFSTLexGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  arg4 = jarg4 ? true : false;
  arg5 = jarg5 ? true : false;
  arg6 = (float)jarg6;
  arg7 = jarg7 ? true : false;
  result = (Juicer::WFSTLexGen *)new Juicer::WFSTLexGen(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(Juicer::WFSTLexGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexGen_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5, jfloat jarg6) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  float arg6 ;
  Juicer::WFSTLexGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  arg4 = jarg4 ? true : false;
  arg5 = jarg5 ? true : false;
  arg6 = (float)jarg6;
  result = (Juicer::WFSTLexGen *)new Juicer::WFSTLexGen(arg1,arg2,arg3,arg4,arg5,arg6);
  *(Juicer::WFSTLexGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexGen_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4, jboolean jarg5) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  bool arg5 ;
  Juicer::WFSTLexGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  arg4 = jarg4 ? true : false;
  arg5 = jarg5 ? true : false;
  result = (Juicer::WFSTLexGen *)new Juicer::WFSTLexGen(arg1,arg2,arg3,arg4,arg5);
  *(Juicer::WFSTLexGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexGen_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  Juicer::WFSTLexGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  arg4 = jarg4 ? true : false;
  result = (Juicer::WFSTLexGen *)new Juicer::WFSTLexGen(arg1,arg2,arg3,arg4);
  *(Juicer::WFSTLexGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexGen_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool arg2 ;
  bool arg3 ;
  Juicer::WFSTLexGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  result = (Juicer::WFSTLexGen *)new Juicer::WFSTLexGen(arg1,arg2,arg3);
  *(Juicer::WFSTLexGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexGen_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  bool arg2 ;
  Juicer::WFSTLexGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  arg2 = jarg2 ? true : false;
  result = (Juicer::WFSTLexGen *)new Juicer::WFSTLexGen(arg1,arg2);
  *(Juicer::WFSTLexGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLexGen_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecLexInfo *arg1 = (Juicer::DecLexInfo *) 0 ;
  Juicer::WFSTLexGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecLexInfo **)&jarg1;
  result = (Juicer::WFSTLexGen *)new Juicer::WFSTLexGen(arg1);
  *(Juicer::WFSTLexGen **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTLexGen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTLexGen *arg1 = (Juicer::WFSTLexGen *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTLexGen **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexGen_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTLexGen *arg1 = (Juicer::WFSTLexGen *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexGen **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexGen_1writeFSM_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jboolean jarg5, jboolean jarg6) {
  Juicer::WFSTLexGen *arg1 = (Juicer::WFSTLexGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;
  bool arg6 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = jarg5 ? true : false;
  arg6 = jarg6 ? true : false;
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5,arg6);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexGen_1writeFSM_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4, jboolean jarg5) {
  Juicer::WFSTLexGen *arg1 = (Juicer::WFSTLexGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  bool arg5 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = jarg5 ? true : false;
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4,arg5);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLexGen_1writeFSM_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Juicer::WFSTLexGen *arg1 = (Juicer::WFSTLexGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLexGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->writeFSM((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTHMMGen(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::WFSTHMMGen *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Juicer::WFSTHMMGen *)new Juicer::WFSTHMMGen((char const *)arg1);
  *(Juicer::WFSTHMMGen **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTHMMGen_1Write(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jstring jarg4) {
  Juicer::WFSTHMMGen *arg1 = (Juicer::WFSTHMMGen *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTHMMGen **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  (arg1)->Write((char const *)arg2,(char const *)arg3,(char const *)arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTHMMGen(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTHMMGen *arg1 = (Juicer::WFSTHMMGen *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTHMMGen **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1fromState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->fromState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1fromState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  result = (int) ((arg1)->fromState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1toState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->toState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1toState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  result = (int) ((arg1)->toState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->label = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  result = (int) ((arg1)->label);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1weight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSALatticeTrans_1weight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  result = (float) ((arg1)->weight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSALatticeTrans(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSALatticeTrans *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSALatticeTrans *)new Juicer::WFSALatticeTrans();
  *(Juicer::WFSALatticeTrans **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSALatticeTrans(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSALatticeTrans *arg1 = (Juicer::WFSALatticeTrans *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSALatticeTrans **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1fromState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->fromState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1fromState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  result = (int) ((arg1)->fromState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1toState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->toState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1toState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  result = (int) ((arg1)->toState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1inLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->inLabel = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1inLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  result = (int) ((arg1)->inLabel);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1outLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->outLabel = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1outLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  result = (int) ((arg1)->outLabel);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1weight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeTrans_1weight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  result = (float) ((arg1)->weight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLatticeTrans(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTLatticeTrans *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTLatticeTrans *)new Juicer::WFSTLatticeTrans();
  *(Juicer::WFSTLatticeTrans **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTLatticeTrans(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTLatticeTrans *arg1 = (Juicer::WFSTLatticeTrans *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTLatticeTrans **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeFinalState_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLatticeFinalState *arg1 = (Juicer::WFSTLatticeFinalState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeFinalState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeFinalState_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLatticeFinalState *arg1 = (Juicer::WFSTLatticeFinalState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeFinalState **)&jarg1;
  result = (int) ((arg1)->state);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeFinalState_1weight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTLatticeFinalState *arg1 = (Juicer::WFSTLatticeFinalState *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeFinalState **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeFinalState_1weight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTLatticeFinalState *arg1 = (Juicer::WFSTLatticeFinalState *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeFinalState **)&jarg1;
  result = (float) ((arg1)->weight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLatticeFinalState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTLatticeFinalState *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTLatticeFinalState *)new Juicer::WFSTLatticeFinalState();
  *(Juicer::WFSTLatticeFinalState **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTLatticeFinalState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTLatticeFinalState *arg1 = (Juicer::WFSTLatticeFinalState *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTLatticeFinalState **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLattice_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3, jboolean jarg4) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  Juicer::WFSTLattice *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  arg4 = jarg4 ? true : false;
  result = (Juicer::WFSTLattice *)new Juicer::WFSTLattice(arg1,arg2,arg3,arg4);
  *(Juicer::WFSTLattice **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLattice_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  bool arg3 ;
  Juicer::WFSTLattice *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  result = (Juicer::WFSTLattice *)new Juicer::WFSTLattice(arg1,arg2,arg3);
  *(Juicer::WFSTLattice **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTLattice(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1enableDeadEndRemoval_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;
  int arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  (arg1)->enableDeadEndRemoval(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1enableDeadEndRemoval_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->enableDeadEndRemoval(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1enableDeadEndRemoval_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  (arg1)->enableDeadEndRemoval();
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1reset(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  result = (int)(arg1)->reset();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1addEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jfloat jarg6) {
  jint jresult = 0 ;
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = (float)jarg6;
  result = (int)(arg1)->addEntry(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1addEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jint jarg7, jfloat jarg8) {
  jint jresult = 0 ;
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  float arg8 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = *(int **)&jarg6;
  arg7 = (int)jarg7;
  arg8 = (float)jarg8;
  result = (int)(arg1)->addEntry(arg2,arg3,arg4,arg5,(int const *)arg6,arg7,arg8);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1addFinalState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jfloat jarg3) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;
  float arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (float)jarg3;
  (arg1)->addFinalState(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1newFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->newFrame(arg2);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1getInitState(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  result = (int)(arg1)->getInitState();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1writeLatticeFSM(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->writeLatticeFSM((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1registerActiveTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->registerActiveTrans(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1registerInactiveTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->registerInactiveTrans(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1printLogInfo(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  (arg1)->printLogInfo();
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1getStateNumOutTrans(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getStateNumOutTrans(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1removeDeadEndTransitions_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  arg2 = jarg2 ? true : false;
  (arg1)->removeDeadEndTransitions(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLattice_1removeDeadEndTransitions_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTLattice *arg1 = (Juicer::WFSTLattice *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLattice **)&jarg1;
  (arg1)->removeDeadEndTransitions();
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTLatticeOnTheFly(JNIEnv *jenv, jclass jcls, jint jarg1, jboolean jarg2, jboolean jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  bool arg2 ;
  bool arg3 ;
  Juicer::WFSTLatticeOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = jarg3 ? true : false;
  result = (Juicer::WFSTLatticeOnTheFly *)new Juicer::WFSTLatticeOnTheFly(arg1,arg2,arg3);
  *(Juicer::WFSTLatticeOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTLatticeOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTLatticeOnTheFly *arg1 = (Juicer::WFSTLatticeOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTLatticeOnTheFly **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeOnTheFly_1addEntry_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jfloat jarg6) {
  jint jresult = 0 ;
  Juicer::WFSTLatticeOnTheFly *arg1 = (Juicer::WFSTLatticeOnTheFly *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = (float)jarg6;
  result = (int)(arg1)->addEntry(arg2,arg3,arg4,arg5,arg6);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTLatticeOnTheFly_1addEntry_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jlong jarg6, jint jarg7, jfloat jarg8) {
  jint jresult = 0 ;
  Juicer::WFSTLatticeOnTheFly *arg1 = (Juicer::WFSTLatticeOnTheFly *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  int arg7 ;
  float arg8 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTLatticeOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = *(int **)&jarg6;
  arg7 = (int)jarg7;
  arg8 = (float)jarg8;
  result = (int)(arg1)->addEntry(arg2,arg3,arg4,arg5,(int const *)arg6,arg7,arg8);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  unsigned char arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  unsigned char result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (unsigned char) ((arg1)->type);
  jresult = (jshort)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1nConnect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nConnect = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1nConnect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (int) ((arg1)->nConnect);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1prev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  Juicer::DecHypHist *arg2 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = *(Juicer::DecHypHist **)&jarg2;
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1prev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  Juicer::DecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (Juicer::DecHypHist *) ((arg1)->prev);
  *(Juicer::DecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (int) ((arg1)->state);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1time_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->time = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1time_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (int) ((arg1)->time);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (float) ((arg1)->score);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1acousticScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->acousticScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1acousticScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (float) ((arg1)->acousticScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1lmScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->lmScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHist_1lmScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  result = (float) ((arg1)->lmScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecHypHist(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecHypHist *)new Juicer::DecHypHist();
  *(Juicer::DecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecHypHist(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecHypHist *arg1 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecHypHist **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  unsigned char arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  unsigned char result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  result = (unsigned char) ((arg1)->type);
  jresult = (jshort)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1nConnect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nConnect = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1nConnect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  result = (int) ((arg1)->nConnect);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1prev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  Juicer::DecHypHist *arg2 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  arg2 = *(Juicer::DecHypHist **)&jarg2;
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1prev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  Juicer::DecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  result = (Juicer::DecHypHist *) ((arg1)->prev);
  *(Juicer::DecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->label = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LabDecHypHist_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  result = (int) ((arg1)->label);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1LabDecHypHist(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::LabDecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::LabDecHypHist *)new Juicer::LabDecHypHist();
  *(Juicer::LabDecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1LabDecHypHist(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::LabDecHypHist *arg1 = (Juicer::LabDecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::LabDecHypHist **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1type_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jshort jarg2) {
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  unsigned char arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  arg2 = (unsigned char)jarg2;
  if (arg1) (arg1)->type = arg2;
}


SWIGEXPORT jshort JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1type_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jshort jresult = 0 ;
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  unsigned char result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  result = (unsigned char) ((arg1)->type);
  jresult = (jshort)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1nConnect_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nConnect = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1nConnect_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  result = (int) ((arg1)->nConnect);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1prev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  Juicer::DecHypHist *arg2 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  arg2 = *(Juicer::DecHypHist **)&jarg2;
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1prev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  Juicer::DecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  result = (Juicer::DecHypHist *) ((arg1)->prev);
  *(Juicer::DecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1latState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->latState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1latState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  result = (int) ((arg1)->latState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1accScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->accScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LatticeDecHypHist_1accScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  result = (float) ((arg1)->accScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1LatticeDecHypHist(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::LatticeDecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::LatticeDecHypHist *)new Juicer::LatticeDecHypHist();
  *(Juicer::LatticeDecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1LatticeDecHypHist(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::LatticeDecHypHist *arg1 = (Juicer::LatticeDecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::LatticeDecHypHist **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DHHTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 1;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LABDHHTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 2;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LABTIMEDHHTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 3;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LABTIMESCOREDHHTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 4;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LABTIME2SCOREDHHTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 5;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_LATTICEDHHTYPE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 6;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MAXNUMDECHYPNRLABELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 2;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1hist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  Juicer::DecHypHist *arg2 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = *(Juicer::DecHypHist **)&jarg2;
  if (arg1) (arg1)->hist = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1hist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  Juicer::DecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (Juicer::DecHypHist *) ((arg1)->hist);
  *(Juicer::DecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1state_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->state = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1state_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (int) ((arg1)->state);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (float) ((arg1)->score);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1acousticScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->acousticScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1acousticScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (float) ((arg1)->acousticScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1lmScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->lmScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1lmScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (float) ((arg1)->lmScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1nLabelsNR_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jchar jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  char arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = (char)jarg2;
  if (arg1) (arg1)->nLabelsNR = arg2;
}


SWIGEXPORT jchar JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1nLabelsNR_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jchar jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  char result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (char) ((arg1)->nLabelsNR);
  jresult = (jchar)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1labelsNR_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  int *arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = *(int **)&jarg2;
  {
    size_t ii;
    int *b = (int *) arg1->labelsNR;
    for (ii = 0; ii < (size_t)2; ii++) b[ii] = *((int *) arg2 + ii);
  }

}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHyp_1labelsNR_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (int *)(int *) ((arg1)->labelsNR);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecHyp(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecHyp *)new Juicer::DecHyp();
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecHyp(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MAXNUMDECHYPOUTLABELS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 5;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1currGState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->currGState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1currGState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  result = (int) ((arg1)->currGState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1pushedWeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->pushedWeight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1pushedWeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  result = (float) ((arg1)->pushedWeight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1nextOutLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  int *arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  arg2 = *(int **)&jarg2;
  {
    size_t ii;
    int *b = (int *) arg1->nextOutLabel;
    for (ii = 0; ii < (size_t)5; ii++) b[ii] = *((int *) arg2 + ii);
  }

}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1nextOutLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  result = (int *)(int *) ((arg1)->nextOutLabel);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1nNextOutLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nNextOutLabel = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypOnTheFly_1nNextOutLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  result = (int) ((arg1)->nNextOutLabel);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecHypOnTheFly(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecHypOnTheFly *)new Juicer::DecHypOnTheFly();
  *(Juicer::DecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecHypOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  delete arg1;
}

#endif


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DEFAULT_1DECHYPPOOL_1SIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 5000;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecHypHistPool(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Juicer::DecHypHistPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  result = (Juicer::DecHypHistPool *)new Juicer::DecHypHistPool(arg1);
  *(Juicer::DecHypHistPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecHypHistPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1addLabelHistToDecHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  int arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (int)jarg3;
  (arg1)->addLabelHistToDecHyp(arg2,arg3);
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1addLabelHistToDecHypOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  int arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = (int)jarg3;
  (arg1)->addLabelHistToDecHypOnTheFly(arg2,arg3);
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1addLatticeHistToDecHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  int arg3 ;
  float arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (int)jarg3;
  arg4 = (float)jarg4;
  (arg1)->addLatticeHistToDecHyp(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1addHistToDecHyp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jint jarg5, jfloat jarg6, jfloat jarg7) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  float arg6 ;
  float arg7 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (int)jarg3;
  arg4 = (float)jarg4;
  arg5 = (int)jarg5;
  arg6 = (float)jarg6;
  arg7 = (float)jarg7;
  (arg1)->addHistToDecHyp(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1addHistToDecHyp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jint jarg5, jfloat jarg6) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;
  float arg6 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (int)jarg3;
  arg4 = (float)jarg4;
  arg5 = (int)jarg5;
  arg6 = (float)jarg6;
  (arg1)->addHistToDecHyp(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1addHistToDecHyp_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jint jarg3, jfloat jarg4, jint jarg5) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  int arg3 ;
  float arg4 ;
  int arg5 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (int)jarg3;
  arg4 = (float)jarg4;
  arg5 = (int)jarg5;
  (arg1)->addHistToDecHyp(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1poolStats(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  (arg1)->poolStats();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1initDecHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = (int)jarg2;
  Juicer::DecHypHistPool::initDecHyp(arg1,arg2);
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1initDecHypOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;
  int arg2 ;
  int arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  Juicer::DecHypHistPool::initDecHypOnTheFly(arg1,arg2,arg3);
}

#endif


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1isActiveHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  result = (bool)Juicer::DecHypHistPool::isActiveHyp(arg1);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1registerLabel(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecHyp *arg1 = (Juicer::DecHyp *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHyp **)&jarg1;
  arg2 = (int)jarg2;
  Juicer::DecHypHistPool::registerLabel(arg1,arg2);
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1registerLabelOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecHypOnTheFly *arg1 = (Juicer::DecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecHypOnTheFly **)&jarg1;
  Juicer::DecHypHistPool::registerLabelOnTheFly(arg1);
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1registerEnd_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jint jarg4, jfloat jarg5, jfloat jarg6) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;
  float arg6 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (float)jarg3;
  arg4 = (int)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  (arg1)->registerEnd(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1registerEnd_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jint jarg4, jfloat jarg5) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  float arg3 ;
  int arg4 ;
  float arg5 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (float)jarg3;
  arg4 = (int)jarg4;
  arg5 = (float)jarg5;
  (arg1)->registerEnd(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1registerEnd_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jint jarg4) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  float arg3 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = (float)jarg3;
  arg4 = (int)jarg4;
  (arg1)->registerEnd(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1resetDecHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  (arg1)->resetDecHyp(arg2);
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1resetDecHypOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  (arg1)->resetDecHypOnTheFly(arg2);
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHyp_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  Juicer::DecHyp *arg3 = (Juicer::DecHyp *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = *(Juicer::DecHyp **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  (arg1)->extendDecHyp(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHyp_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  Juicer::DecHyp *arg3 = (Juicer::DecHyp *) 0 ;
  float arg4 ;
  float arg5 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = *(Juicer::DecHyp **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  (arg1)->extendDecHyp(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHyp_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;
  Juicer::DecHyp *arg3 = (Juicer::DecHyp *) 0 ;
  float arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  arg3 = *(Juicer::DecHyp **)&jarg3;
  arg4 = (float)jarg4;
  (arg1)->extendDecHyp(arg2,arg3,arg4);
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHypOnTheFly_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jint jarg7, jfloat jarg8, jlong jarg9, jint jarg10) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg3 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  float arg8 ;
  int *arg9 = (int *) 0 ;
  int arg10 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = *(Juicer::DecHypOnTheFly **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (int)jarg7;
  arg8 = (float)jarg8;
  arg9 = *(int **)&jarg9;
  arg10 = (int)jarg10;
  (arg1)->extendDecHypOnTheFly(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHypOnTheFly_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jint jarg7, jfloat jarg8, jlong jarg9) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg3 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  float arg8 ;
  int *arg9 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = *(Juicer::DecHypOnTheFly **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (int)jarg7;
  arg8 = (float)jarg8;
  arg9 = *(int **)&jarg9;
  (arg1)->extendDecHypOnTheFly(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHypOnTheFly_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jint jarg7, jfloat jarg8) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg3 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  float arg8 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = *(Juicer::DecHypOnTheFly **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (int)jarg7;
  arg8 = (float)jarg8;
  (arg1)->extendDecHypOnTheFly(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHypOnTheFly_1_1SWIG_13(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6, jint jarg7) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg3 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = *(Juicer::DecHypOnTheFly **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (int)jarg7;
  (arg1)->extendDecHypOnTheFly(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHypOnTheFly_1_1SWIG_14(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jfloat jarg6) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg3 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = *(Juicer::DecHypOnTheFly **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  (arg1)->extendDecHypOnTheFly(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHypOnTheFly_1_1SWIG_15(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg3 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg4 ;
  float arg5 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = *(Juicer::DecHypOnTheFly **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  (arg1)->extendDecHypOnTheFly(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1extendDecHypOnTheFly_1_1SWIG_16(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg3 = (Juicer::DecHypOnTheFly *) 0 ;
  float arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  arg3 = *(Juicer::DecHypOnTheFly **)&jarg3;
  arg4 = (float)jarg4;
  (arg1)->extendDecHypOnTheFly(arg2,arg3,arg4);
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1returnSingleElem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypHist *arg2 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypHist **)&jarg2;
  (arg1)->returnSingleElem(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1setLattice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::WFSTLattice *arg2 = (Juicer::WFSTLattice *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::WFSTLattice **)&jarg2;
  (arg1)->setLattice(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecHypHistPool_1resetDecHypHist(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecHypHistPool *arg1 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::DecHypHist *arg2 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecHypHistPool **)&jarg1;
  arg2 = *(Juicer::DecHypHist **)&jarg2;
  (arg1)->resetDecHypHist(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1network_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::WFSTNetwork *arg2 = (Juicer::WFSTNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = *(Juicer::WFSTNetwork **)&jarg2;
  if (arg1) (arg1)->network = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1network_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::WFSTNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (Juicer::WFSTNetwork *) ((arg1)->network);
  *(Juicer::WFSTNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nActiveModels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nActiveModels = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nActiveModels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (int) ((arg1)->nActiveModels);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nActiveEmitHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nActiveEmitHyps = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nActiveEmitHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (int) ((arg1)->nActiveEmitHyps);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nActiveEndHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nActiveEndHyps = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nActiveEndHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (int) ((arg1)->nActiveEndHyps);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nEmitHypsProcessed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nEmitHypsProcessed = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nEmitHypsProcessed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (int) ((arg1)->nEmitHypsProcessed);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nEndHypsProcessed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nEndHypsProcessed = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1nEndHypsProcessed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (int) ((arg1)->nEndHypsProcessed);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1activeModelsLookupLen_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->activeModelsLookupLen = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1activeModelsLookupLen_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (int) ((arg1)->activeModelsLookupLen);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1emitPruneWin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->emitPruneWin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1emitPruneWin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->emitPruneWin);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1phoneEndPruneWin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->phoneEndPruneWin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1phoneEndPruneWin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->phoneEndPruneWin);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1phoneStartPruneWin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->phoneStartPruneWin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1phoneStartPruneWin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->phoneStartPruneWin);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1wordPruneWin_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->wordPruneWin = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1wordPruneWin_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->wordPruneWin);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1maxEmitHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->maxEmitHyps = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1maxEmitHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (int) ((arg1)->maxEmitHyps);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestEmitScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->bestEmitScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestEmitScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->bestEmitScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currEmitPruneThresh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->currEmitPruneThresh = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currEmitPruneThresh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->currEmitPruneThresh);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}

#ifndef NO_BEST_END
SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestEndScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->bestEndScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestEndScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->bestEndScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}
#endif

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currEndPruneThresh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->currEndPruneThresh = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currEndPruneThresh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->currEndPruneThresh);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}

#ifndef NO_BEST_START
SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestStartScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->bestStartScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestStartScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->bestStartScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}
#endif

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currStartPruneThresh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->currStartPruneThresh = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currStartPruneThresh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->currStartPruneThresh);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currWordPruneThresh_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->currWordPruneThresh = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1currWordPruneThresh_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->currWordPruneThresh);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestHypHist_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::DecHypHist *arg2 = (Juicer::DecHypHist *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = *(Juicer::DecHypHist **)&jarg2;
  if (arg1) (arg1)->bestHypHist = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1bestHypHist_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::DecHypHist *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (Juicer::DecHypHist *) ((arg1)->bestHypHist);
  *(Juicer::DecHypHist **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1normaliseScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->normaliseScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1normaliseScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (float) ((arg1)->normaliseScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1emitHypsHistogram_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::Histogram *arg2 = (Juicer::Histogram *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = *(Juicer::Histogram **)&jarg2;
  if (arg1) (arg1)->emitHypsHistogram = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1emitHypsHistogram_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::Histogram *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (Juicer::Histogram *) ((arg1)->emitHypsHistogram);
  *(Juicer::Histogram **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTDecoder_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoder *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTDecoder *)new Juicer::WFSTDecoder();
  *(Juicer::WFSTDecoder **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTDecoder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jint jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10) {
  jlong jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::HTKFlatModels *arg2 = (Juicer::HTKFlatModels *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  Juicer::WFSTDecoder *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::HTKFlatModels **)&jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (int)jarg7;
  arg8 = jarg8 ? true : false;
  arg9 = jarg9 ? true : false;
  arg10 = jarg10 ? true : false;
  result = (Juicer::WFSTDecoder *)new Juicer::WFSTDecoder(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(Juicer::WFSTDecoder **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTDecoder_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jint jarg7, jboolean jarg8, jboolean jarg9) {
  jlong jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::HTKFlatModels *arg2 = (Juicer::HTKFlatModels *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  bool arg8 ;
  bool arg9 ;
  Juicer::WFSTDecoder *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::HTKFlatModels **)&jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (int)jarg7;
  arg8 = jarg8 ? true : false;
  arg9 = jarg9 ? true : false;
  result = (Juicer::WFSTDecoder *)new Juicer::WFSTDecoder(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
  *(Juicer::WFSTDecoder **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTDecoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  (arg1)->init();
}

/*
SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1processFrame_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float *arg2 = (float *) 0 ;
  int arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = *(float **)&jarg2;
  arg3 = (int)jarg3;
  (arg1)->processFrame(arg2,arg3);
}
*/

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1processFrame_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  float **arg2 = (float **) 0 ;
  int arg3 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = *(float ***)&jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  (arg1)->processFrame(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (Juicer::DecHyp *)(arg1)->finish();
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1modelLevelOutput(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (bool)(arg1)->modelLevelOutput();
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1latticeGeneration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (bool)(arg1)->latticeGeneration();
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1getLattice(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  Juicer::WFSTLattice *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  result = (Juicer::WFSTLattice *)(arg1)->getLattice();
  *(Juicer::WFSTLattice **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1getBestHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jlong jarg3, jlong jarg4) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int *arg2 = (int *) 0 ;
  int **arg3 = (int **) 0 ;
  int **arg4 = (int **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = *(int **)&jarg2;
  arg3 = *(int ***)&jarg3;
  arg4 = *(int ***)&jarg4;
  (arg1)->getBestHyp(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoder_1setMaxAllocModels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoder *arg1 = (Juicer::WFSTDecoder *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoder **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->setMaxAllocModels(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1prev_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::Path_ *arg2 = (Juicer::Path_ *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = *(Juicer::Path_ **)&jarg2;
  if (arg1) (arg1)->prev = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1prev_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::Path_ *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (Juicer::Path_ *) ((arg1)->prev);
  *(Juicer::Path_ **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1link_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::Path_ *arg2 = (Juicer::Path_ *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = *(Juicer::Path_ **)&jarg2;
  if (arg1) (arg1)->link = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1link_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::Path_ *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (Juicer::Path_ *) ((arg1)->link);
  *(Juicer::Path_ **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1knil_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::Path_ *arg2 = (Juicer::Path_ *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = *(Juicer::Path_ **)&jarg2;
  if (arg1) (arg1)->knil = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1knil_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::Path_ *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (Juicer::Path_ *) ((arg1)->knil);
  *(Juicer::Path_ **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1frame_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->frame = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1frame_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (int) ((arg1)->frame);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::score_t arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = (Juicer::score_t)jarg2;
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  Juicer::score_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (Juicer::score_t) ((arg1)->score);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1acousticScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->acousticScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1acousticScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (float) ((arg1)->acousticScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1lmScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->lmScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1lmScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (float) ((arg1)->lmScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1label_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->label = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1label_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (int) ((arg1)->label);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1refCount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->refCount = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1refCount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (int) ((arg1)->refCount);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1directlyUsedByToken_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->directlyUsedByToken = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Path_1directlyUsedByToken_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Path **)&jarg1;
  result = (bool) ((arg1)->directlyUsedByToken);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1Path(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::Path *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::Path *)new Juicer::Path();
  *(Juicer::Path **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1Path(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::Path *arg1 = (Juicer::Path *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::Path **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1score_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  Juicer::score_t arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Token **)&jarg1;
  arg2 = (Juicer::score_t)jarg2;
  if (arg1) (arg1)->score = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1score_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  Juicer::score_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Token **)&jarg1;
  result = (Juicer::score_t) ((arg1)->score);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1acousticScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  Juicer::score_t arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Token **)&jarg1;
  arg2 = (Juicer::score_t)jarg2;
  if (arg1) (arg1)->acousticScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1acousticScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  Juicer::score_t result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Token **)&jarg1;
  result = (Juicer::score_t) ((arg1)->acousticScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1lmScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Token **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->lmScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1lmScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Token **)&jarg1;
  result = (float) ((arg1)->lmScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1path_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  Juicer::Path *arg2 = (Juicer::Path *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::Token **)&jarg1;
  arg2 = *(Juicer::Path **)&jarg2;
  if (arg1) (arg1)->path = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Token_1path_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;
  Juicer::Path *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Token **)&jarg1;
  result = (Juicer::Path *) ((arg1)->path);
  *(Juicer::Path **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1Token(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::Token *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::Token *)new Juicer::Token();
  *(Juicer::Token **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1Token(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::Token *arg1 = (Juicer::Token *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::Token **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  Juicer::NetInst_ *arg2 = (Juicer::NetInst_ *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  arg2 = *(Juicer::NetInst_ **)&jarg2;
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  Juicer::NetInst_ *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  result = (Juicer::NetInst_ *) ((arg1)->next);
  *(Juicer::NetInst_ **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1hmmIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->hmmIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1hmmIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  result = (int) ((arg1)->hmmIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1nStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nStates = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1nStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  result = (int) ((arg1)->nStates);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1nActiveHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nActiveHyps = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1nActiveHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  result = (int) ((arg1)->nActiveHyps);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1trans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  if (arg1) (arg1)->trans = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1trans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  Juicer::WFSTTransition *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  result = (Juicer::WFSTTransition *) ((arg1)->trans);
  *(Juicer::WFSTTransition **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1teeWeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->teeWeight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1teeWeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  result = (float) ((arg1)->teeWeight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NetInst_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;
  Juicer::Token *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NetInst **)&jarg1;
  result = (Juicer::Token *)(Juicer::Token *) ((arg1)->states);
  *(Juicer::Token **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1NetInst(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::NetInst *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::NetInst *)new Juicer::NetInst();
  *(Juicer::NetInst **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1NetInst(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::NetInst *arg1 = (Juicer::NetInst *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::NetInst **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTDecoderLite(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jfloat jarg3, jfloat jarg4, jfloat jarg5, jfloat jarg6, jint jarg7) {
  jlong jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::HTKFlatModels *arg2 = (Juicer::HTKFlatModels *) 0 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  float arg6 ;
  int arg7 ;
  Juicer::WFSTDecoderLite *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::HTKFlatModels **)&jarg2;
  arg3 = (float)jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (float)jarg6;
  arg7 = (int)jarg7;
  result = (Juicer::WFSTDecoderLite *)new Juicer::WFSTDecoderLite(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(Juicer::WFSTDecoderLite **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTDecoderLite(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTDecoderLite *arg1 = (Juicer::WFSTDecoderLite *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTDecoderLite **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoderLite_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTDecoderLite *arg1 = (Juicer::WFSTDecoderLite *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoderLite **)&jarg1;
  (arg1)->init();
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoderLite_1finish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoderLite *arg1 = (Juicer::WFSTDecoderLite *) 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoderLite **)&jarg1;
  result = (Juicer::DecHyp *)(arg1)->finish();
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoderLite_1recognitionStart(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTDecoderLite *arg1 = (Juicer::WFSTDecoderLite *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoderLite **)&jarg1;
  (arg1)->recognitionStart();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoderLite_1processFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jint jarg3, jint jarg4) {
  Juicer::WFSTDecoderLite *arg1 = (Juicer::WFSTDecoderLite *) 0 ;
  float **arg2 = (float **) 0 ;
  int arg3 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoderLite **)&jarg1;
  arg2 = *(float ***)&jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  (arg1)->processFrame(arg2,arg3,arg4);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoderLite_1recognitionFinish(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTDecoderLite *arg1 = (Juicer::WFSTDecoderLite *) 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoderLite **)&jarg1;
  result = (Juicer::DecHyp *)(arg1)->recognitionFinish();
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTDecoderLite_1setMaxAllocModels(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTDecoderLite *arg1 = (Juicer::WFSTDecoderLite *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTDecoderLite **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->setMaxAllocModels(arg2);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DEAD_1TRANS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) -4;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FOLLOWON_1TRANS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) -3;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NOPUSHING_1TRANS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) -2;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_UNDECIDED_1TRANS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) -1;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jdouble JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CACHESIZEPERCENTAGE_1get(JNIEnv *jenv, jclass jcls) {
  jdouble jresult = 0 ;
  double result;

  (void)jenv;
  (void)jcls;
  result = (double) 0.0;
  jresult = (jdouble)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CACHEMINSIZE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 3000000;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NUMBUCKETS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 1024;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTOnTheFlyDecoder_1gNetwork_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTOnTheFlyDecoder *arg1 = (Juicer::WFSTOnTheFlyDecoder *) 0 ;
  Juicer::WFSTSortedInLabelNetwork *arg2 = (Juicer::WFSTSortedInLabelNetwork *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTOnTheFlyDecoder **)&jarg1;
  arg2 = *(Juicer::WFSTSortedInLabelNetwork **)&jarg2;
  if (arg1) (arg1)->gNetwork = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTOnTheFlyDecoder_1gNetwork_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTOnTheFlyDecoder *arg1 = (Juicer::WFSTOnTheFlyDecoder *) 0 ;
  Juicer::WFSTSortedInLabelNetwork *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTOnTheFlyDecoder **)&jarg1;
  result = (Juicer::WFSTSortedInLabelNetwork *) ((arg1)->gNetwork);
  *(Juicer::WFSTSortedInLabelNetwork **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTOnTheFlyDecoder_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTOnTheFlyDecoder *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTOnTheFlyDecoder *)new Juicer::WFSTOnTheFlyDecoder();
  *(Juicer::WFSTOnTheFlyDecoder **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTOnTheFlyDecoder_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jfloat jarg4, jfloat jarg5, jint jarg6, jboolean jarg7, jboolean jarg8, jboolean jarg9, jboolean jarg10) {
  jlong jresult = 0 ;
  Juicer::WFSTNetwork *arg1 = (Juicer::WFSTNetwork *) 0 ;
  Juicer::WFSTSortedInLabelNetwork *arg2 = (Juicer::WFSTSortedInLabelNetwork *) 0 ;
  Juicer::IModels *arg3 = (Juicer::IModels *) 0 ;
  float arg4 ;
  float arg5 ;
  int arg6 ;
  bool arg7 ;
  bool arg8 ;
  bool arg9 ;
  bool arg10 ;
  Juicer::WFSTOnTheFlyDecoder *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(Juicer::WFSTNetwork **)&jarg1;
  arg2 = *(Juicer::WFSTSortedInLabelNetwork **)&jarg2;
  arg3 = *(Juicer::IModels **)&jarg3;
  arg4 = (float)jarg4;
  arg5 = (float)jarg5;
  arg6 = (int)jarg6;
  arg7 = jarg7 ? true : false;
  arg8 = jarg8 ? true : false;
  arg9 = jarg9 ? true : false;
  arg10 = jarg10 ? true : false;
  result = (Juicer::WFSTOnTheFlyDecoder *)new Juicer::WFSTOnTheFlyDecoder(arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
  *(Juicer::WFSTOnTheFlyDecoder **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTOnTheFlyDecoder(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTOnTheFlyDecoder *arg1 = (Juicer::WFSTOnTheFlyDecoder *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTOnTheFlyDecoder **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTOnTheFlyDecoder_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTOnTheFlyDecoder *arg1 = (Juicer::WFSTOnTheFlyDecoder *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTOnTheFlyDecoder **)&jarg1;
  (arg1)->init();
}

#endif


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DST_1FEATS_1HTK_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Juicer::DSTDataFileFormat result;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DSTDataFileFormat)Juicer::DST_FEATS_HTK;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DBT_1MODE_1WFSTDECODE_1WORDS_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Juicer::DBTMode result;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DBTMode)Juicer::DBT_MODE_WFSTDECODE_WORDS;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1index_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->index = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1index_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  result = (int) ((arg1)->index);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1startTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->startTime = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1startTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  result = (int) ((arg1)->startTime);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1endTime_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->endTime = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1endTime_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  result = (int) ((arg1)->endTime);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1acousticScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->acousticScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1acousticScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  result = (float) ((arg1)->acousticScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1lmScore_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->lmScore = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DSTResultWord_1lmScore_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  result = (float) ((arg1)->lmScore);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DSTResultWord(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DSTResultWord *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DSTResultWord *)new Juicer::DSTResultWord();
  *(Juicer::DSTResultWord **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DSTResultWord(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DSTResultWord *arg1 = (Juicer::DSTResultWord *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DSTResultWord **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1mode_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::DBTMode arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (Juicer::DBTMode)jarg2;
  if (arg1) (arg1)->mode = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1mode_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::DBTMode result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (Juicer::DBTMode) ((arg1)->mode);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1expectedWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->expectedWords = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1expectedWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int *) ((arg1)->expectedWords);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nExpectedWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nExpectedWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nExpectedWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int) ((arg1)->nExpectedWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1actualWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->actualWords = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1actualWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int *) ((arg1)->actualWords);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1actualWordsTimes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->actualWordsTimes = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1actualWordsTimes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int *) ((arg1)->actualWordsTimes);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nActualWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nActualWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nActualWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int) ((arg1)->nActualWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1inputFormat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::DSTDataFileFormat arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (Juicer::DSTDataFileFormat)jarg2;
  if (arg1) (arg1)->inputFormat = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1inputFormat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::DSTDataFileFormat result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (Juicer::DSTDataFileFormat) ((arg1)->inputFormat);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1removeSentMarks_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->removeSentMarks = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1removeSentMarks_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (bool) ((arg1)->removeSentMarks);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1decoderInput_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  float **arg2 = (float **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(float ***)&jarg2;
  if (arg1) (arg1)->decoderInput = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1decoderInput_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (float **) ((arg1)->decoderInput);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nResultLevels_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nResultLevels = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nResultLevels_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int) ((arg1)->nResultLevels);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nResultWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nResultWords = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1nResultWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int) ((arg1)->nResultWords);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1resultWords_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::DSTResultWord **arg2 = (Juicer::DSTResultWord **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(Juicer::DSTResultWord ***)&jarg2;
  if (arg1) (arg1)->resultWords = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1resultWords_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::DSTResultWord **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (Juicer::DSTResultWord **) ((arg1)->resultWords);
  *(Juicer::DSTResultWord ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1startTimeStamp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  long long arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (long long)jarg2;
  if (arg1) (arg1)->startTimeStamp = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1startTimeStamp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  long long result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (long long) ((arg1)->startTimeStamp);
  jresult = (jlong)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1frameTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;
  long long result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  result = (long long)(arg1)->frameTime(arg2);
  jresult = (jlong)result;
  //printf(".%d.", result);
  return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1mSpeakerID_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg2) {
      arg1->mSpeakerID = (char const *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->mSpeakerID, (const char *)arg2);
    } else {
      arg1->mSpeakerID = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1mSpeakerID_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (char *) ((arg1)->mSpeakerID);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  //printf(".%d.", result);
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1speakerID(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (char *)(arg1)->speakerID();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  //printf(".%d.", result);
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecoderSingleTest(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DecoderSingleTest *)new Juicer::DecoderSingleTest();
  *(Juicer::DecoderSingleTest **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecoderSingleTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getActualWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getActualWord(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getActualWordTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getActualWordTime(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getResultWord(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int arg2 ;
  int arg3 ;
  Juicer::DSTResultWord *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (Juicer::DSTResultWord *)(arg1)->getResultWord(arg2,arg3);
  *(Juicer::DSTResultWord **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1configure(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jstring jarg4, jint jarg5, jlong jarg6, jint jarg7, jboolean jarg8) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::DBTMode arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  int arg5 ;
  int *arg6 = (int *) 0 ;
  Juicer::DSTDataFileFormat arg7 ;
  bool arg8 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = (Juicer::DBTMode)jarg2;
  arg3 = (int)jarg3;
  arg4 = 0;
  if (jarg4) {
    arg4 = (char *)jenv->GetStringUTFChars(jarg4, 0);
    if (!arg4) return ;
  }
  arg5 = (int)jarg5;
  arg6 = *(int **)&jarg6;
  arg7 = (Juicer::DSTDataFileFormat)jarg7;
  arg8 = jarg8 ? true : false;
  (arg1)->configure(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
  if (arg4) jenv->ReleaseStringUTFChars(jarg4, (const char *)arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::WFSTDecoderLite *arg2 = (Juicer::WFSTDecoderLite *) 0 ;
  Juicer::FrontEnd *arg3 = (Juicer::FrontEnd *) 0 ;
  Juicer::DecVocabulary *arg4 = (Juicer::DecVocabulary *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(Juicer::WFSTDecoderLite **)&jarg2;
  arg3 = *(Juicer::FrontEnd **)&jarg3;
  arg4 = *(Juicer::DecVocabulary **)&jarg4;
  (arg1)->run(arg2,arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1openSource(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::FrontEnd *arg2 = (Juicer::FrontEnd *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(Juicer::FrontEnd **)&jarg2;
  (arg1)->openSource(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1decodeUtterance(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_) {
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  Juicer::WFSTDecoderLite *arg2 = (Juicer::WFSTDecoderLite *) 0 ;
  Juicer::FrontEnd *arg3 = (Juicer::FrontEnd *) 0 ;
  Juicer::DecVocabulary *arg4 = (Juicer::DecVocabulary *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  arg2 = *(Juicer::WFSTDecoderLite **)&jarg2;
  arg3 = *(Juicer::FrontEnd **)&jarg3;
  arg4 = *(Juicer::DecVocabulary **)&jarg4;
  (arg1)->decodeUtterance(arg2,arg3,arg4);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getTestFName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (char *)(arg1)->getTestFName();
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getNumFrames(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (int)(arg1)->getNumFrames();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getDecodeTime(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (float)(arg1)->getDecodeTime();
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getTotalLMScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (float)(arg1)->getTotalLMScore();
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1getTotalAcousticScore(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::DecoderSingleTest *arg1 = (Juicer::DecoderSingleTest *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderSingleTest **)&jarg1;
  result = (float)(arg1)->getTotalAcousticScore();
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderSingleTest_1setFramesPerSec(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  Juicer::DecoderSingleTest::setFramesPerSec(arg1);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DBT_1OUTPUT_1VERBOSE_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  Juicer::DBTOutputFormat result;

  (void)jenv;
  (void)jcls;
  result = (Juicer::DBTOutputFormat)Juicer::DBT_OUTPUT_VERBOSE;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1vocab_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  Juicer::DecVocabulary *arg2 = (Juicer::DecVocabulary *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  arg2 = *(Juicer::DecVocabulary **)&jarg2;
  if (arg1) (arg1)->vocab = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1vocab_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  Juicer::DecVocabulary *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  result = (Juicer::DecVocabulary *) ((arg1)->vocab);
  *(Juicer::DecVocabulary **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1nTests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nTests = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1nTests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  result = (int) ((arg1)->nTests);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1nTestsAlloc_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nTestsAlloc = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1nTestsAlloc_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  result = (int) ((arg1)->nTestsAlloc);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1tests_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  Juicer::DecoderSingleTest **arg2 = (Juicer::DecoderSingleTest **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  arg2 = *(Juicer::DecoderSingleTest ***)&jarg2;
  if (arg1) (arg1)->tests = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1tests_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  Juicer::DecoderSingleTest **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  result = (Juicer::DecoderSingleTest **) ((arg1)->tests);
  *(Juicer::DecoderSingleTest ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1DecoderBatchTest(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_, jlong jarg4, jobject jarg4_, jstring jarg5, jint jarg6, jint jarg7, jstring jarg8, jint jarg9, jstring jarg10, jboolean jarg11, jint jarg12) {
  jlong jresult = 0 ;
  Juicer::DecVocabulary *arg1 = (Juicer::DecVocabulary *) 0 ;
  Juicer::PhoneLookup *arg2 = (Juicer::PhoneLookup *) 0 ;
  Juicer::FrontEnd *arg3 = (Juicer::FrontEnd *) 0 ;
  Juicer::WFSTDecoder *arg4 = (Juicer::WFSTDecoder *) 0 ;
  char *arg5 = (char *) 0 ;
  Juicer::DSTDataFileFormat arg6 ;
  int arg7 ;
  char *arg8 = (char *) 0 ;
  Juicer::DBTOutputFormat arg9 ;
  char *arg10 = (char *) 0 ;
  bool arg11 ;
  int arg12 ;
  Juicer::DecoderBatchTest *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  (void)jarg4_;
  arg1 = *(Juicer::DecVocabulary **)&jarg1;
  arg2 = *(Juicer::PhoneLookup **)&jarg2;
  arg3 = *(Juicer::FrontEnd **)&jarg3;
  arg4 = *(Juicer::WFSTDecoder **)&jarg4;
  arg5 = 0;
  if (jarg5) {
    arg5 = (char *)jenv->GetStringUTFChars(jarg5, 0);
    if (!arg5) return 0;
  }
  arg6 = (Juicer::DSTDataFileFormat)jarg6;
  arg7 = (int)jarg7;
  arg8 = 0;
  if (jarg8) {
    arg8 = (char *)jenv->GetStringUTFChars(jarg8, 0);
    if (!arg8) return 0;
  }
  arg9 = (Juicer::DBTOutputFormat)jarg9;
  arg10 = 0;
  if (jarg10) {
    arg10 = (char *)jenv->GetStringUTFChars(jarg10, 0);
    if (!arg10) return 0;
  }
  arg11 = jarg11 ? true : false;
  arg12 = (int)jarg12;
  result = (Juicer::DecoderBatchTest *)new Juicer::DecoderBatchTest(arg1,arg2,arg3,arg4,(char const *)arg5,arg6,arg7,(char const *)arg8,arg9,(char const *)arg10,arg11,arg12);
  *(Juicer::DecoderBatchTest **)&jresult = result;
  if (arg5) jenv->ReleaseStringUTFChars(jarg5, (const char *)arg5);
  if (arg8) jenv->ReleaseStringUTFChars(jarg8, (const char *)arg8);
  if (arg10) jenv->ReleaseStringUTFChars(jarg10, (const char *)arg10);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1DecoderBatchTest(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1activateLatticeGeneration(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->activateLatticeGeneration((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1run(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  (arg1)->run();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1outputText(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  (arg1)->outputText();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1loop_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->loop = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DecoderBatchTest_1loop_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::DecoderBatchTest *arg1 = (Juicer::DecoderBatchTest *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::DecoderBatchTest **)&jarg1;
  result = (bool) ((arg1)->loop);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1trans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  if (arg1) (arg1)->trans = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1trans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::WFSTTransition *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (Juicer::WFSTTransition *) ((arg1)->trans);
  *(Juicer::WFSTTransition **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1hmmIndex_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->hmmIndex = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1hmmIndex_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (int) ((arg1)->hmmIndex);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1hyps1_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  if (arg1) (arg1)->hyps1 = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1hyps1_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (Juicer::DecHyp *) ((arg1)->hyps1);
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1hyps2_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  if (arg1) (arg1)->hyps2 = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1hyps2_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (Juicer::DecHyp *) ((arg1)->hyps2);
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1prevHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  if (arg1) (arg1)->prevHyps = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1prevHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (Juicer::DecHyp *) ((arg1)->prevHyps);
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1currHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *arg2 = (Juicer::DecHyp *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = *(Juicer::DecHyp **)&jarg2;
  if (arg1) (arg1)->currHyps = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1currHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::DecHyp *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (Juicer::DecHyp *) ((arg1)->currHyps);
  *(Juicer::DecHyp **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1nActiveHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nActiveHyps = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1nActiveHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (int) ((arg1)->nActiveHyps);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::WFSTModel *arg2 = (Juicer::WFSTModel *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  arg2 = *(Juicer::WFSTModel **)&jarg2;
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModel_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;
  Juicer::WFSTModel *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  result = (Juicer::WFSTModel *) ((arg1)->next);
  *(Juicer::WFSTModel **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTModel(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTModel *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTModel *)new Juicer::WFSTModel();
  *(Juicer::WFSTModel **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTModel(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTModel *arg1 = (Juicer::WFSTModel *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTModel **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nStates = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (int) ((arg1)->nStates);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nTotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nTotal = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nTotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (int) ((arg1)->nTotal);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (int) ((arg1)->nUsed);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nFree_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nFree = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nFree_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (int) ((arg1)->nFree);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


#ifdef USE_EXTRAS

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1floatlocAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->floatlocAmount = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1floatlocAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (int) ((arg1)->floatlocAmount);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nAllocs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nAllocs = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1nAllocs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (int) ((arg1)->nAllocs);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1allocs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  Juicer::WFSTModel **arg2 = (Juicer::WFSTModel **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = *(Juicer::WFSTModel ***)&jarg2;
  if (arg1) (arg1)->allocs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1allocs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  Juicer::WFSTModel **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (Juicer::WFSTModel **) ((arg1)->allocs);
  *(Juicer::WFSTModel ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1freeElems_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  Juicer::WFSTModel **arg2 = (Juicer::WFSTModel **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  arg2 = *(Juicer::WFSTModel ***)&jarg2;
  if (arg1) (arg1)->freeElems = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelFNSPool_1freeElems_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;
  Juicer::WFSTModel **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  result = (Juicer::WFSTModel **) ((arg1)->freeElems);
  *(Juicer::WFSTModel ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTModelFNSPool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTModelFNSPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTModelFNSPool *)new Juicer::WFSTModelFNSPool();
  *(Juicer::WFSTModelFNSPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTModelFNSPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTModelFNSPool *arg1 = (Juicer::WFSTModelFNSPool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTModelFNSPool **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelPool_1models_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;
  Juicer::IModels *arg2 = (Juicer::IModels *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  arg2 = *(Juicer::IModels **)&jarg2;
  if (arg1) (arg1)->models = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelPool_1models_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;
  Juicer::IModels *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  result = (Juicer::IModels *) ((arg1)->models);
  *(Juicer::IModels **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelPool_1decHypHistPool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;
  Juicer::DecHypHistPool *arg2 = (Juicer::DecHypHistPool *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  arg2 = *(Juicer::DecHypHistPool **)&jarg2;
  if (arg1) (arg1)->decHypHistPool = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelPool_1decHypHistPool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;
  Juicer::DecHypHistPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  result = (Juicer::DecHypHistPool *) ((arg1)->decHypHistPool);
  *(Juicer::DecHypHistPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTModelPool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTModelPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTModelPool *)new Juicer::WFSTModelPool();
  *(Juicer::WFSTModelPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTModelPool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  Juicer::DecHypHistPool *arg2 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::WFSTModelPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = *(Juicer::DecHypHistPool **)&jarg2;
  result = (Juicer::WFSTModelPool *)new Juicer::WFSTModelPool(arg1,arg2);
  *(Juicer::WFSTModelPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTModelPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelPool_1getElem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;
  Juicer::WFSTModel *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  result = (Juicer::WFSTModel *)(arg1)->getElem(arg2);
  *(Juicer::WFSTModel **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelPool_1returnElem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;
  Juicer::WFSTModel *arg2 = (Juicer::WFSTModel *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  arg2 = *(Juicer::WFSTModel **)&jarg2;
  (arg1)->returnElem(arg2);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelPool_1numUsed(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelPool *arg1 = (Juicer::WFSTModelPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelPool **)&jarg1;
  result = (int)(arg1)->numUsed();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


#ifdef WITH_ONTHEFLY

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1ptr_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::NodeToDecHypOnTheFly_ptr *arg1 = (Juicer::NodeToDecHypOnTheFly_ptr *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly_ptr **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1ptr_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly_ptr *arg1 = (Juicer::NodeToDecHypOnTheFly_ptr *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly_ptr **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *) ((arg1)->next);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1ptr_1left_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::NodeToDecHypOnTheFly_ptr *arg1 = (Juicer::NodeToDecHypOnTheFly_ptr *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly_ptr **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->left = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1ptr_1left_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly_ptr *arg1 = (Juicer::NodeToDecHypOnTheFly_ptr *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly_ptr **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *) ((arg1)->left);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1NodeToDecHypOnTheFly_1ptr(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly_ptr *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::NodeToDecHypOnTheFly_ptr *)new Juicer::NodeToDecHypOnTheFly_ptr();
  *(Juicer::NodeToDecHypOnTheFly_ptr **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1NodeToDecHypOnTheFly_1ptr(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::NodeToDecHypOnTheFly_ptr *arg1 = (Juicer::NodeToDecHypOnTheFly_ptr *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::NodeToDecHypOnTheFly_ptr **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1gState_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->gState = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1gState_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  result = (int) ((arg1)->gState);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1matchedOutLabel_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->matchedOutLabel = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1matchedOutLabel_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  result = (int) ((arg1)->matchedOutLabel);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1hyp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *arg2 = (Juicer::DecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  arg2 = *(Juicer::DecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->hyp = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1hyp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  Juicer::DecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  result = (Juicer::DecHypOnTheFly *)& ((arg1)->hyp);
  *(Juicer::DecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1ptr_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly_ptr *arg2 = (Juicer::NodeToDecHypOnTheFly_ptr *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly_ptr **)&jarg2;
  if (arg1) (arg1)->ptr = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1ptr_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly_ptr *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly_ptr *)& ((arg1)->ptr);
  *(Juicer::NodeToDecHypOnTheFly_ptr **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1right_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->right = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFly_1right_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *) ((arg1)->right);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1NodeToDecHypOnTheFly(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::NodeToDecHypOnTheFly *)new Juicer::NodeToDecHypOnTheFly();
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1NodeToDecHypOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::NodeToDecHypOnTheFly *arg1 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::NodeToDecHypOnTheFly **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFlyList_1head_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NodeToDecHypOnTheFlyList *arg1 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->head = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFlyList_1head_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg1 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *) ((arg1)->head);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFlyList_1tail_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NodeToDecHypOnTheFlyList *arg1 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->tail = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFlyList_1tail_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg1 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *) ((arg1)->tail);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1NodeToDecHypOnTheFlyList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::NodeToDecHypOnTheFlyList *)new Juicer::NodeToDecHypOnTheFlyList();
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1NodeToDecHypOnTheFlyList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::NodeToDecHypOnTheFlyList *arg1 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1NodeToDecHypOnTheFlyPool_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFlyPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::NodeToDecHypOnTheFlyPool *)new Juicer::NodeToDecHypOnTheFlyPool();
  *(Juicer::NodeToDecHypOnTheFlyPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1NodeToDecHypOnTheFlyPool_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  Juicer::NodeToDecHypOnTheFlyPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyPool *)new Juicer::NodeToDecHypOnTheFlyPool(arg1);
  *(Juicer::NodeToDecHypOnTheFlyPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1NodeToDecHypOnTheFlyPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::NodeToDecHypOnTheFlyPool *arg1 = (Juicer::NodeToDecHypOnTheFlyPool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyPool **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFlyPool_1getSingleNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::NodeToDecHypOnTheFlyPool *arg1 = (Juicer::NodeToDecHypOnTheFlyPool *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyPool **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *)(arg1)->getSingleNode();
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NodeToDecHypOnTheFlyPool_1returnSingleNode(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::NodeToDecHypOnTheFlyPool *arg1 = (Juicer::NodeToDecHypOnTheFlyPool *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::NodeToDecHypOnTheFlyPool **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  (arg1)->returnSingleNode(arg2);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTModelOnTheFly(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTModelOnTheFly *)new Juicer::WFSTModelOnTheFly();
  *(Juicer::WFSTModelOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTModelOnTheFly(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1getLastStateHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jlong jarg4) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  bool arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = *(int **)&jarg3;
  arg4 = *(int **)&jarg4;
  result = (Juicer::NodeToDecHypOnTheFly *)(arg1)->getLastStateHyp(arg2,arg3,arg4);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1clearNonInitStateHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  (arg1)->clearNonInitStateHyp();
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1findInitStateHyp(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jboolean jarg3, jint jarg4, jint jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  bool *arg6 = (bool *) 0 ;
  Juicer::DecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  arg3 = jarg3 ? true : false;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = *(bool **)&jarg6;
  result = (Juicer::DecHypOnTheFly *)(arg1)->findInitStateHyp(arg2,arg3,arg4,arg5,arg6);
  *(Juicer::DecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1getNextEmitStateHyps(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2, jlong jarg3, jlong jarg4, jlong jarg5) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  bool arg2 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = jarg2 ? true : false;
  arg3 = *(int **)&jarg3;
  arg4 = *(int **)&jarg4;
  arg5 = *(int **)&jarg5;
  result = (Juicer::NodeToDecHypOnTheFly *)(arg1)->getNextEmitStateHyps(arg2,arg3,arg4,arg5);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1findCurrEmitStateHypsFromInitSt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jint jarg4, jint jarg5, jlong jarg6, jlong jarg7) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  Juicer::NodeToDecHypOnTheFly **arg6 = (Juicer::NodeToDecHypOnTheFly **) 0 ;
  bool *arg7 = (bool *) 0 ;
  Juicer::DecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = jarg3 ? true : false;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = *(Juicer::NodeToDecHypOnTheFly ***)&jarg6;
  arg7 = *(bool **)&jarg7;
  result = (Juicer::DecHypOnTheFly *)(arg1)->findCurrEmitStateHypsFromInitSt(arg2,arg3,arg4,arg5,arg6,arg7);
  *(Juicer::DecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1findCurrEmitStateHypsFromEmitSt(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jboolean jarg3, jint jarg4, jint jarg5, jlong jarg6) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  int arg2 ;
  bool arg3 ;
  int arg4 ;
  int arg5 ;
  bool *arg6 = (bool *) 0 ;
  Juicer::DecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = jarg3 ? true : false;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = *(bool **)&jarg6;
  result = (Juicer::DecHypOnTheFly *)(arg1)->findCurrEmitStateHypsFromEmitSt(arg2,arg3,arg4,arg5,arg6);
  *(Juicer::DecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1createHelper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly **)(arg1)->createHelper();
  *(Juicer::NodeToDecHypOnTheFly ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1assignHelper(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jboolean jarg3) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly **arg2 = (Juicer::NodeToDecHypOnTheFly **) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly ***)&jarg2;
  arg3 = jarg3 ? true : false;
  (arg1)->assignHelper(arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1trans_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  if (arg1) (arg1)->trans = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1trans_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::WFSTTransition *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::WFSTTransition *) ((arg1)->trans);
  *(Juicer::WFSTTransition **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hmm_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  DecodingHMM *arg2 = (DecodingHMM *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(DecodingHMM **)&jarg2;
  if (arg1) (arg1)->hmm = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hmm_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  DecodingHMM *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (DecodingHMM *) ((arg1)->hmm);
  *(DecodingHMM **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1initMapNotPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->initMapNotPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1initMapNotPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *) ((arg1)->initMapNotPushed);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1initMapPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly *arg2 = (Juicer::NodeToDecHypOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFly **)&jarg2;
  if (arg1) (arg1)->initMapPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1initMapPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFly *) ((arg1)->initMapPushed);
  *(Juicer::NodeToDecHypOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp1NotPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->hyp1NotPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp1NotPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->hyp1NotPushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp1Pushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->hyp1Pushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp1Pushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->hyp1Pushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp2NotPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->hyp2NotPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp2NotPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->hyp2NotPushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp2Pushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->hyp2Pushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1hyp2Pushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->hyp2Pushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1prevHypsNotPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->prevHypsNotPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1prevHypsNotPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->prevHypsNotPushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1prevHypsPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->prevHypsPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1prevHypsPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->prevHypsPushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1currHypsNotPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->currHypsNotPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1currHypsNotPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->currHypsNotPushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1currHypsPushed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *arg2 = (Juicer::NodeToDecHypOnTheFlyList *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyList **)&jarg2;
  if (arg1) (arg1)->currHypsPushed = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1currHypsPushed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyList *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyList *) ((arg1)->currHypsPushed);
  *(Juicer::NodeToDecHypOnTheFlyList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1pool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyPool *arg2 = (Juicer::NodeToDecHypOnTheFlyPool *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::NodeToDecHypOnTheFlyPool **)&jarg2;
  if (arg1) (arg1)->pool = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1pool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::NodeToDecHypOnTheFlyPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::NodeToDecHypOnTheFlyPool *) ((arg1)->pool);
  *(Juicer::NodeToDecHypOnTheFlyPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1decHypHistPool_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::DecHypHistPool *arg2 = (Juicer::DecHypHistPool *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::DecHypHistPool **)&jarg2;
  if (arg1) (arg1)->decHypHistPool = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1decHypHistPool_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::DecHypHistPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::DecHypHistPool *) ((arg1)->decHypHistPool);
  *(Juicer::DecHypHistPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1nActiveHyps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nActiveHyps = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1nActiveHyps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (int) ((arg1)->nActiveHyps);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1next_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::WFSTModelOnTheFly *arg2 = (Juicer::WFSTModelOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  arg2 = *(Juicer::WFSTModelOnTheFly **)&jarg2;
  if (arg1) (arg1)->next = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFly_1next_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFly *arg1 = (Juicer::WFSTModelOnTheFly *) 0 ;
  Juicer::WFSTModelOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFly **)&jarg1;
  result = (Juicer::WFSTModelOnTheFly *) ((arg1)->next);
  *(Juicer::WFSTModelOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nStates = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (int) ((arg1)->nStates);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nTotal_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nTotal = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nTotal_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (int) ((arg1)->nTotal);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nUsed_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nUsed = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nUsed_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (int) ((arg1)->nUsed);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nFree_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nFree = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nFree_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (int) ((arg1)->nFree);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1floatlocAmount_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->floatlocAmount = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1floatlocAmount_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (int) ((arg1)->floatlocAmount);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nAllocs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nAllocs = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1nAllocs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (int) ((arg1)->nAllocs);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1allocs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  Juicer::WFSTModelOnTheFly **arg2 = (Juicer::WFSTModelOnTheFly **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = *(Juicer::WFSTModelOnTheFly ***)&jarg2;
  if (arg1) (arg1)->allocs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1allocs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  Juicer::WFSTModelOnTheFly **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (Juicer::WFSTModelOnTheFly **) ((arg1)->allocs);
  *(Juicer::WFSTModelOnTheFly ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1freeElems_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  Juicer::WFSTModelOnTheFly **arg2 = (Juicer::WFSTModelOnTheFly **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  arg2 = *(Juicer::WFSTModelOnTheFly ***)&jarg2;
  if (arg1) (arg1)->freeElems = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyFNSPool_1freeElems_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;
  Juicer::WFSTModelOnTheFly **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  result = (Juicer::WFSTModelOnTheFly **) ((arg1)->freeElems);
  *(Juicer::WFSTModelOnTheFly ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTModelOnTheFlyFNSPool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFlyFNSPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::WFSTModelOnTheFlyFNSPool *)new Juicer::WFSTModelOnTheFlyFNSPool();
  *(Juicer::WFSTModelOnTheFlyFNSPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTModelOnTheFlyFNSPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTModelOnTheFlyFNSPool *arg1 = (Juicer::WFSTModelOnTheFlyFNSPool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTModelOnTheFlyFNSPool **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1WFSTModelOnTheFlyPool(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Juicer::IModels *arg1 = (Juicer::IModels *) 0 ;
  Juicer::DecHypHistPool *arg2 = (Juicer::DecHypHistPool *) 0 ;
  Juicer::WFSTModelOnTheFlyPool *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::IModels **)&jarg1;
  arg2 = *(Juicer::DecHypHistPool **)&jarg2;
  result = (Juicer::WFSTModelOnTheFlyPool *)new Juicer::WFSTModelOnTheFlyPool(arg1,arg2);
  *(Juicer::WFSTModelOnTheFlyPool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1WFSTModelOnTheFlyPool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::WFSTModelOnTheFlyPool *arg1 = (Juicer::WFSTModelOnTheFlyPool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::WFSTModelOnTheFlyPool **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyPool_1getElem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  Juicer::WFSTModelOnTheFlyPool *arg1 = (Juicer::WFSTModelOnTheFlyPool *) 0 ;
  Juicer::WFSTTransition *arg2 = (Juicer::WFSTTransition *) 0 ;
  Juicer::WFSTModelOnTheFly *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFlyPool **)&jarg1;
  arg2 = *(Juicer::WFSTTransition **)&jarg2;
  result = (Juicer::WFSTModelOnTheFly *)(arg1)->getElem(arg2);
  *(Juicer::WFSTModelOnTheFly **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFSTModelOnTheFlyPool_1returnElem(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::WFSTModelOnTheFlyPool *arg1 = (Juicer::WFSTModelOnTheFlyPool *) 0 ;
  Juicer::WFSTModelOnTheFly *arg2 = (Juicer::WFSTModelOnTheFly *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::WFSTModelOnTheFlyPool **)&jarg1;
  arg2 = *(Juicer::WFSTModelOnTheFly **)&jarg2;
  (arg1)->returnElem(arg2);
}

#endif

#ifdef WITH_HTK

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1nStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nStates = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1nStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  result = (int) ((arg1)->nStates);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1nSucs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->nSucs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1nSucs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  result = (int *) ((arg1)->nSucs);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1sucs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  int **arg2 = (int **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  arg2 = *(int ***)&jarg2;
  if (arg1) (arg1)->sucs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1sucs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  int **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  result = (int **) ((arg1)->sucs);
  *(int ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1logProbs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  float **arg2 = (float **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  arg2 = *(float ***)&jarg2;
  if (arg1) (arg1)->logProbs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1logProbs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  result = (float **) ((arg1)->logProbs);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1seIndexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  Juicer::SEIndex *arg2 = (Juicer::SEIndex *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  arg2 = *(Juicer::SEIndex **)&jarg2;
  if (arg1) (arg1)->seIndexes = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1seIndexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  Juicer::SEIndex *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  result = (Juicer::SEIndex *) ((arg1)->seIndexes);
  *(Juicer::SEIndex **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1trP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  float **arg2 = (float **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  arg2 = *(float ***)&jarg2;
  if (arg1) (arg1)->trP = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelsTransMatrix_1trP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  result = (float **) ((arg1)->trP);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HModelsTransMatrix(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::HModelsTransMatrix *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::HModelsTransMatrix *)new Juicer::HModelsTransMatrix();
  *(Juicer::HModelsTransMatrix **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HModelsTransMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::HModelsTransMatrix *arg1 = (Juicer::HModelsTransMatrix *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::HModelsTransMatrix **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelCacheElement_1isEmpty_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::HModelCacheElement *arg1 = (Juicer::HModelCacheElement *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelCacheElement **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->isEmpty = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelCacheElement_1isEmpty_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::HModelCacheElement *arg1 = (Juicer::HModelCacheElement *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelCacheElement **)&jarg1;
  result = (bool) ((arg1)->isEmpty);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelCacheElement_1logProb_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::HModelCacheElement *arg1 = (Juicer::HModelCacheElement *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelCacheElement **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->logProb = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModelCacheElement_1logProb_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::HModelCacheElement *arg1 = (Juicer::HModelCacheElement *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModelCacheElement **)&jarg1;
  result = (float) ((arg1)->logProb);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HModelCacheElement(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::HModelCacheElement *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::HModelCacheElement *)new Juicer::HModelCacheElement();
  *(Juicer::HModelCacheElement **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HModelCacheElement(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::HModelCacheElement *arg1 = (Juicer::HModelCacheElement *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::HModelCacheElement **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HModels_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::HModels *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::HModels *)new Juicer::HModels();
  *(Juicer::HModels **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HModels_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  char *arg1 = (char *) 0 ;
  Juicer::HModels *result = 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (Juicer::HModels *)new Juicer::HModels((char const *)arg1);
  *(Juicer::HModels **)&jresult = result;
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HModels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::HModels **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1SetHTKModelsList(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->SetHTKModelsList((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1Load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4;
  (arg1)->Load((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1Load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->Load((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1Load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->Load((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->output((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1outputStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->outputStats(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1outputStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  (arg1)->outputStats();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1newFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  float *arg3 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(float **)&jarg3;
  (arg1)->newFrame(arg2,(float const *)arg3);
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1calcOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (float)(arg1)->calcOutput(arg2,arg3);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1calcOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->calcOutput(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getNumHMMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  result = (int)(arg1)->getNumHMMs();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getCurrFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  result = (int)(arg1)->getCurrFrame();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getHMMName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getHMMName(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getInputVecSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  result = (int)(arg1)->getInputVecSize();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getNumStates(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->getNumSuccessors(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (int)(arg1)->getSuccessor(arg2,arg3,arg4);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getSuccessorLogProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jfloat jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (float)(arg1)->getSuccessorLogProb(arg2,arg3,arg4);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getTeeLogProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->getTeeLogProb(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}

#endif


#ifdef HAVE_HTKLIB

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getTransMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float **)(arg1)->getTransMat(arg2);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1getSEIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  int arg2 ;
  Juicer::SEIndex *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (Juicer::SEIndex *)(arg1)->getSEIndex(arg2);
  *(Juicer::SEIndex **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1createSEIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  (arg1)->createSEIndex();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1createTrP(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  (arg1)->createTrP();
}

#ifdef USE_EXTRAS

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1hSet_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  HMMSet arg2 ;
  HMMSet *argp2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  argp2 = *(HMMSet **)&jarg2;
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null HMMSet");
    return ;
  }
  arg2 = *argp2;
  if (arg1) (arg1)->hSet = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1hSet_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  HMMSet result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  result =  ((arg1)->hSet);
  *(HMMSet **)&jresult = new HMMSet((const HMMSet &)result);
  printf(".%d.", result); return jresult;
}

#endif

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1inputXformDir_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->inputXformDir) delete [] arg1->inputXformDir;
    if (arg2) {
      arg1->inputXformDir = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->inputXformDir, (const char *)arg2);
    } else {
      arg1->inputXformDir = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1inputXformDir_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  result = (char *) ((arg1)->inputXformDir);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1useHAdapt_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->useHAdapt = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1useHAdapt_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  result = (bool) ((arg1)->useHAdapt);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


#ifdef USE_EXTRAS

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1xfInfo_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  XFInfo *arg2 = (XFInfo *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  arg2 = *(XFInfo **)&jarg2;
  if (arg1) (arg1)->xfInfo = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HModels_1xfInfo_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HModels *arg1 = (Juicer::HModels *) 0 ;
  XFInfo *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HModels **)&jarg1;
  result = (XFInfo *) ((arg1)->xfInfo);
  *(XFInfo **)&jresult = result;
  printf(".%d.", result); return jresult;
}

#endif

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MeanVec_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::MeanVec *arg1 = (Juicer::MeanVec *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MeanVec **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MeanVec_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::MeanVec *arg1 = (Juicer::MeanVec *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MeanVec **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MeanVec_1means_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::MeanVec *arg1 = (Juicer::MeanVec *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MeanVec **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->means = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_MeanVec_1means_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::MeanVec *arg1 = (Juicer::MeanVec *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::MeanVec **)&jarg1;
  result = (float *) ((arg1)->means);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1MeanVec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::MeanVec *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::MeanVec *)new Juicer::MeanVec();
  *(Juicer::MeanVec **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1MeanVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::MeanVec *arg1 = (Juicer::MeanVec *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::MeanVec **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  result = (float *) ((arg1)->vars);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1minusHalfOverVars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->minusHalfOverVars = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1minusHalfOverVars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  result = (float *) ((arg1)->minusHalfOverVars);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1sumLogVarPlusNObsLog2Pi_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->sumLogVarPlusNObsLog2Pi = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_VarVec_1sumLogVarPlusNObsLog2Pi_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::VarVec **)&jarg1;
  result = (float) ((arg1)->sumLogVarPlusNObsLog2Pi);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1VarVec(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::VarVec *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::VarVec *)new Juicer::VarVec();
  *(Juicer::VarVec **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1VarVec(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::VarVec *arg1 = (Juicer::VarVec *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::VarVec **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1nStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nStates = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1nStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (int) ((arg1)->nStates);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1nSucs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->nSucs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1nSucs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (int *) ((arg1)->nSucs);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1sucs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  int **arg2 = (int **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = *(int ***)&jarg2;
  if (arg1) (arg1)->sucs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1sucs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  int **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (int **) ((arg1)->sucs);
  *(int ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1probs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  float **arg2 = (float **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = *(float ***)&jarg2;
  if (arg1) (arg1)->probs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1probs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (float **) ((arg1)->probs);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1logProbs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  float **arg2 = (float **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = *(float ***)&jarg2;
  if (arg1) (arg1)->logProbs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1logProbs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (float **) ((arg1)->logProbs);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1seIndexes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  Juicer::SEIndex *arg2 = (Juicer::SEIndex *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = *(Juicer::SEIndex **)&jarg2;
  if (arg1) (arg1)->seIndexes = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1seIndexes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  Juicer::SEIndex *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (Juicer::SEIndex *) ((arg1)->seIndexes);
  *(Juicer::SEIndex **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1trP_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  float **arg2 = (float **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  arg2 = *(float ***)&jarg2;
  if (arg1) (arg1)->trP = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_TransMatrix_1trP_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  result = (float **) ((arg1)->trP);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1TransMatrix(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::TransMatrix *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::TransMatrix *)new Juicer::TransMatrix();
  *(Juicer::TransMatrix **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1TransMatrix(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::TransMatrix *arg1 = (Juicer::TransMatrix *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::TransMatrix **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1nComps_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nComps = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1nComps_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  result = (int) ((arg1)->nComps);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1meanVecInds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->meanVecInds = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1meanVecInds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  result = (int *) ((arg1)->meanVecInds);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1varVecInds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->varVecInds = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1varVecInds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  result = (int *) ((arg1)->varVecInds);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1currCompOutputs_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->currCompOutputs = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1currCompOutputs_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  result = (float *) ((arg1)->currCompOutputs);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1currCompOutputsValid_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jboolean jarg2) {
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  bool arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  arg2 = jarg2 ? true : false;
  if (arg1) (arg1)->currCompOutputsValid = arg2;
}


SWIGEXPORT jboolean JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_Mixture_1currCompOutputsValid_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;
  bool result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::Mixture **)&jarg1;
  result = (bool) ((arg1)->currCompOutputsValid);
  jresult = (jboolean)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1Mixture(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::Mixture *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::Mixture *)new Juicer::Mixture();
  *(Juicer::Mixture **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1Mixture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::Mixture *arg1 = (Juicer::Mixture *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::Mixture **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1mixtureInd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->mixtureInd = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1mixtureInd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  result = (int) ((arg1)->mixtureInd);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1compWeights_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->compWeights = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1compWeights_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  result = (float *) ((arg1)->compWeights);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1logCompWeights_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->logCompWeights = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_GMM_1logCompWeights_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::GMM **)&jarg1;
  result = (float *) ((arg1)->logCompWeights);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1GMM(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::GMM *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::GMM *)new Juicer::GMM();
  *(Juicer::GMM **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1GMM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::GMM *arg1 = (Juicer::GMM *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::GMM **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1nStates_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->nStates = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1nStates_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  result = (int) ((arg1)->nStates);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1gmmInds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->gmmInds = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1gmmInds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  result = (int *) ((arg1)->gmmInds);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1transMatrixInd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->transMatrixInd = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1transMatrixInd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  result = (int) ((arg1)->transMatrixInd);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1teeWeight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->teeWeight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HMM_1teeWeight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HMM **)&jarg1;
  result = (float) ((arg1)->teeWeight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HMM(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::HMM *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::HMM *)new Juicer::HMM();
  *(Juicer::HMM **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HMM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::HMM *arg1 = (Juicer::HMM *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::HMM **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKModels(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::HTKModels *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::HTKModels *)new Juicer::HTKModels();
  *(Juicer::HTKModels **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKModels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1Load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3, jint jarg4) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4;
  (arg1)->Load((char const *)arg2,(char const *)arg3,arg4);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1Load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->Load((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1Load_1_1SWIG_12(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->Load((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1output(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->output((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1outputStats_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  FILE *arg2 = (FILE *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = *(FILE **)&jarg2;
  (arg1)->outputStats(arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1outputStats_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  (arg1)->outputStats();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1newFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jlong jarg4) {
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (float **)&jarg3;
  arg4 = (int)jarg4;
  (arg1)->newFrame(arg2,(float /*const*/ **)arg3,arg4);
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1calcOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (float)(arg1)->calcOutput(arg2,arg3);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1calcOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->calcOutput(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getNumHMMs(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  result = (int)(arg1)->getNumHMMs();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getCurrFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  result = (int)(arg1)->getCurrFrame();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getHMMName(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jstring jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (char *)(arg1)->getHMMName(arg2);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getInputVecSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  result = (int)(arg1)->getInputVecSize();
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getNumStates(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (int)(arg1)->getNumStates(arg2);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getNumSuccessors(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jint jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (int)(arg1)->getNumSuccessors(arg2,arg3);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getSuccessor(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jint jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (int)(arg1)->getSuccessor(arg2,arg3,arg4);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getSuccessorLogProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3, jint jarg4) {
  jfloat jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  result = (float)(arg1)->getSuccessorLogProb(arg2,arg3,arg4);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getTeeLogProb(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->getTeeLogProb(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getTransMat(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float **)(arg1)->getTransMat(arg2);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKModels_1getSEIndex(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  Juicer::HTKModels *arg1 = (Juicer::HTKModels *) 0 ;
  int arg2 ;
  Juicer::SEIndex *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (Juicer::SEIndex *)(arg1)->getSEIndex(arg2);
  *(Juicer::SEIndex **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_testModelsIO(JNIEnv *jenv, jclass jcls, jstring jarg1, jstring jarg2, jstring jarg3, jint jarg4) {
  char *arg1 = (char *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return ;
  }
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return ;
  }
  arg4 = (int)jarg4;
  Juicer::testModelsIO((char const *)arg1,(char const *)arg2,(char const *)arg3,arg4);
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FMixture_1compNum_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::FMixture *arg1 = (Juicer::FMixture *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FMixture **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->compNum = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FMixture_1compNum_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::FMixture *arg1 = (Juicer::FMixture *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FMixture **)&jarg1;
  result = (int) ((arg1)->compNum);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FMixture_1compInd_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::FMixture *arg1 = (Juicer::FMixture *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FMixture **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->compInd = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_FMixture_1compInd_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  Juicer::FMixture *arg1 = (Juicer::FMixture *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::FMixture **)&jarg1;
  result = (int) ((arg1)->compInd);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1FMixture(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::FMixture *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::FMixture *)new Juicer::FMixture();
  *(Juicer::FMixture **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1FMixture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::FMixture *arg1 = (Juicer::FMixture *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::FMixture **)&jarg1;
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKFlatModels(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Juicer::HTKFlatModels *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (Juicer::HTKFlatModels *)new Juicer::HTKFlatModels();
  *(Juicer::HTKFlatModels **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKFlatModels(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1readBinary(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->readBinary((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1init(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  (arg1)->init();
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1Load_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jboolean jarg3) {
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;
  char *arg2 = (char *) 0 ;
  bool arg3 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = jarg3 ? true : false;
  (arg1)->Load((char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1Load_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  (arg1)->Load((char const *)arg2);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1calcOutput_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jfloat jresult = 0 ;
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;
  int arg2 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  arg2 = (int)jarg2;
  result = (float)(arg1)->calcOutput(arg2);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1calcOutput_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  jfloat jresult = 0 ;
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;
  int arg2 ;
  int arg3 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  result = (float)(arg1)->calcOutput(arg2,arg3);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1newFrame(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jint jarg4) {
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;
  int arg2 ;
  float **arg3 = (float **) 0 ;
  int arg4 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = *(float ***)&jarg3;
  arg4 = (int)jarg4;
  (arg1)->newFrame(arg2,(float /*const*/ **)arg3,arg4);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKFlatModels_1setBlockSize(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  Juicer::HTKFlatModels *arg1 = (Juicer::HTKFlatModels *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Juicer::HTKFlatModels **)&jarg1;
  arg2 = (int)jarg2;
  (arg1)->setBlockSize(arg2);
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_CK_1DIAGC_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  CovKind result;

  (void)jenv;
  (void)jcls;
  result = (CovKind)CK_DIAGC;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_DK_1NULLD_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  DurKind result;

  (void)jenv;
  (void)jcls;
  result = (DurKind)DK_NULLD;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1hmm_1set_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->hmm_set_id) delete [] arg1->hmm_set_id;
    if (arg2) {
      arg1->hmm_set_id = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->hmm_set_id, (const char *)arg2);
    } else {
      arg1->hmm_set_id = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1hmm_1set_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  result = (char *) ((arg1)->hmm_set_id);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1n_1streams_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_streams = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1n_1streams_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  result = (int) ((arg1)->n_streams);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1stream_1widths_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->stream_widths = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1stream_1widths_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  result = (int *) ((arg1)->stream_widths);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1vec_1size_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->vec_size = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1vec_1size_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  result = (int) ((arg1)->vec_size);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1cov_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  CovKind arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  arg2 = (CovKind)jarg2;
  if (arg1) (arg1)->cov_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1cov_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  CovKind result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  result = (CovKind) ((arg1)->cov_kind);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1dur_1kind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  DurKind arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  arg2 = (DurKind)jarg2;
  if (arg1) (arg1)->dur_kind = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1dur_1kind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  DurKind result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  result = (DurKind) ((arg1)->dur_kind);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1parm_1kind_1str_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->parm_kind_str) delete [] arg1->parm_kind_str;
    if (arg2) {
      arg1->parm_kind_str = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->parm_kind_str, (const char *)arg2);
    } else {
      arg1->parm_kind_str = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKGlobalOpts_1parm_1kind_1str_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  result = (char *) ((arg1)->parm_kind_str);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKGlobalOpts(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKGlobalOpts *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKGlobalOpts *)new HTKGlobalOpts();
  *(HTKGlobalOpts **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKGlobalOpts(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKGlobalOpts *arg1 = (HTKGlobalOpts *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKGlobalOpts **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  result = (int) ((arg1)->id);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1weight_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->weight = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1weight_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  result = (float) ((arg1)->weight);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1n_1means_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_means = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1n_1means_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  result = (int) ((arg1)->n_means);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1means_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->means = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1means_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  result = (float *) ((arg1)->means);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1n_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_vars = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1n_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  result = (int) ((arg1)->n_vars);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1vars_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->vars = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1vars_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  result = (float *) ((arg1)->vars);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1gconst_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jfloat jarg2) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  arg2 = (float)jarg2;
  if (arg1) (arg1)->gconst = arg2;
}


SWIGEXPORT jfloat JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixture_1gconst_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jfloat jresult = 0 ;
  HTKMixture *arg1 = (HTKMixture *) 0 ;
  float result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixture **)&jarg1;
  result = (float) ((arg1)->gconst);
  jresult = (jfloat)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKMixture(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKMixture *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKMixture *)new HTKMixture();
  *(HTKMixture **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKMixture(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKMixture *arg1 = (HTKMixture *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKMixture **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixturePool_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HTKMixturePool *arg1 = (HTKMixturePool *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixturePool **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixturePool_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HTKMixturePool *arg1 = (HTKMixturePool *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixturePool **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixturePool_1n_1mixes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKMixturePool *arg1 = (HTKMixturePool *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixturePool **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_mixes = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixturePool_1n_1mixes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKMixturePool *arg1 = (HTKMixturePool *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixturePool **)&jarg1;
  result = (int) ((arg1)->n_mixes);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixturePool_1mixes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKMixturePool *arg1 = (HTKMixturePool *) 0 ;
  HTKMixture **arg2 = (HTKMixture **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixturePool **)&jarg1;
  arg2 = *(HTKMixture ***)&jarg2;
  if (arg1) (arg1)->mixes = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixturePool_1mixes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKMixturePool *arg1 = (HTKMixturePool *) 0 ;
  HTKMixture **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixturePool **)&jarg1;
  result = (HTKMixture **) ((arg1)->mixes);
  *(HTKMixture ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKMixturePool(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKMixturePool *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKMixturePool *)new HTKMixturePool();
  *(HTKMixturePool **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKMixturePool(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKMixturePool *arg1 = (HTKMixturePool *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKMixturePool **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1sh_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->sh_name) delete [] arg1->sh_name;
    if (arg2) {
      arg1->sh_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->sh_name, (const char *)arg2);
    } else {
      arg1->sh_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1sh_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  result = (char *) ((arg1)->sh_name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->id = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  result = (int) ((arg1)->id);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1n_1mixes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_mixes = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1n_1mixes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  result = (int) ((arg1)->n_mixes);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1mixes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  HTKMixture **arg2 = (HTKMixture **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  arg2 = *(HTKMixture ***)&jarg2;
  if (arg1) (arg1)->mixes = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1mixes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  HTKMixture **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  result = (HTKMixture **) ((arg1)->mixes);
  *(HTKMixture ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1pool_1ind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->pool_ind = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1pool_1ind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  result = (int) ((arg1)->pool_ind);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1weights_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->weights = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMState_1weights_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMState **)&jarg1;
  result = (float *) ((arg1)->weights);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKHMMState(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKHMMState *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKHMMState *)new HTKHMMState();
  *(HTKHMMState **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKHMMState(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKHMMState *arg1 = (HTKHMMState *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKHMMState **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKTransMat_1sh_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HTKTransMat *arg1 = (HTKTransMat *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKTransMat **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->sh_name) delete [] arg1->sh_name;
    if (arg2) {
      arg1->sh_name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->sh_name, (const char *)arg2);
    } else {
      arg1->sh_name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKTransMat_1sh_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HTKTransMat *arg1 = (HTKTransMat *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKTransMat **)&jarg1;
  result = (char *) ((arg1)->sh_name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKTransMat_1n_1states_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKTransMat *arg1 = (HTKTransMat *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKTransMat **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_states = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKTransMat_1n_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKTransMat *arg1 = (HTKTransMat *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKTransMat **)&jarg1;
  result = (int) ((arg1)->n_states);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKTransMat_1transp_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKTransMat *arg1 = (HTKTransMat *) 0 ;
  float **arg2 = (float **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKTransMat **)&jarg1;
  arg2 = *(float ***)&jarg2;
  if (arg1) (arg1)->transp = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKTransMat_1transp_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKTransMat *arg1 = (HTKTransMat *) 0 ;
  float **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKTransMat **)&jarg1;
  result = (float **) ((arg1)->transp);
  *(float ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKTransMat(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKTransMat *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKTransMat *)new HTKTransMat();
  *(HTKTransMat **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKTransMat(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKTransMat *arg1 = (HTKTransMat *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKTransMat **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1name_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  char *arg2 = (char *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMM **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  {
    if (arg1->name) delete [] arg1->name;
    if (arg2) {
      arg1->name = (char *) (new char[strlen((const char *)arg2)+1]);
      strcpy((char *)arg1->name, (const char *)arg2);
    } else {
      arg1->name = 0;
    }
  }
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1name_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMM **)&jarg1;
  result = (char *) ((arg1)->name);
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1n_1states_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMM **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_states = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1n_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMM **)&jarg1;
  result = (int) ((arg1)->n_states);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1emit_1states_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  HTKHMMState **arg2 = (HTKHMMState **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMM **)&jarg1;
  arg2 = *(HTKHMMState ***)&jarg2;
  if (arg1) (arg1)->emit_states = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1emit_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  HTKHMMState **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMM **)&jarg1;
  result = (HTKHMMState **) ((arg1)->emit_states);
  *(HTKHMMState ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1transmat_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  HTKTransMat *arg2 = (HTKTransMat *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HTKHMM **)&jarg1;
  arg2 = *(HTKTransMat **)&jarg2;
  if (arg1) (arg1)->transmat = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMM_1transmat_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKHMM *arg1 = (HTKHMM *) 0 ;
  HTKTransMat *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMM **)&jarg1;
  result = (HTKTransMat *) ((arg1)->transmat);
  *(HTKTransMat **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKHMM(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKHMM *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKHMM *)new HTKHMM();
  *(HTKHMM **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKHMM(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKHMM *arg1 = (HTKHMM *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKHMM **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1global_1opts_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKGlobalOpts *arg2 = (HTKGlobalOpts *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = *(HTKGlobalOpts **)&jarg2;
  if (arg1) (arg1)->global_opts = *arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1global_1opts_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKGlobalOpts *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (HTKGlobalOpts *)& ((arg1)->global_opts);
  *(HTKGlobalOpts **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1sh_1transmats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_sh_transmats = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1sh_1transmats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (int) ((arg1)->n_sh_transmats);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1sh_1transmats_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKTransMat **arg2 = (HTKTransMat **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = *(HTKTransMat ***)&jarg2;
  if (arg1) (arg1)->sh_transmats = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1sh_1transmats_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKTransMat **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (HTKTransMat **) ((arg1)->sh_transmats);
  *(HTKTransMat ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1sh_1states_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_sh_states = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1sh_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (int) ((arg1)->n_sh_states);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1sh_1states_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKHMMState **arg2 = (HTKHMMState **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = *(HTKHMMState ***)&jarg2;
  if (arg1) (arg1)->sh_states = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1sh_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKHMMState **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (HTKHMMState **) ((arg1)->sh_states);
  *(HTKHMMState ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1mix_1pools_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_mix_pools = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1mix_1pools_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (int) ((arg1)->n_mix_pools);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1mix_1pools_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKMixturePool **arg2 = (HTKMixturePool **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = *(HTKMixturePool ***)&jarg2;
  if (arg1) (arg1)->mix_pools = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1mix_1pools_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKMixturePool **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (HTKMixturePool **) ((arg1)->mix_pools);
  *(HTKMixturePool ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1hmms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_hmms = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1n_1hmms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (int) ((arg1)->n_hmms);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1hmms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKHMM **arg2 = (HTKHMM **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  arg2 = *(HTKHMM ***)&jarg2;
  if (arg1) (arg1)->hmms = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKDef_1hmms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKDef *arg1 = (HTKDef *) 0 ;
  HTKHMM **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  result = (HTKHMM **) ((arg1)->hmms);
  *(HTKHMM ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKDef(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKDef *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKDef *)new HTKDef();
  *(HTKDef **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKDef(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKDef *arg1 = (HTKDef *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKDef **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_htk_1def_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  HTKDef *arg1 = (HTKDef *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKDef **)&jarg1;
  htk_def = *arg1;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_htk_1def_1get(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKDef *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKDef *)&htk_def;
  *(HTKDef **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_htkparse(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jint jresult = 0 ;
  void *arg1 = (void *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  arg1 = *(void **)&jarg1;
  result = (int)htkparse(arg1);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_cleanHTKDef(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  cleanHTKDef();
}


#ifdef WITH_EXTRAS

SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_floatVector_1n_1elems_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  floatVector *arg1 = (floatVector *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatVector **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_elems = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_floatVector_1n_1elems_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  floatVector *arg1 = (floatVector *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatVector **)&jarg1;
  result = (int) ((arg1)->n_elems);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_floatVector_1elems_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  floatVector *arg1 = (floatVector *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatVector **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->elems = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_floatVector_1elems_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  floatVector *arg1 = (floatVector *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(floatVector **)&jarg1;
  result = (float *) ((arg1)->elems);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1floatVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  floatVector *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (floatVector *)new floatVector();
  *(floatVector **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1floatVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  floatVector *arg1 = (floatVector *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(floatVector **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_IntVector_1n_1elems_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  IntVector *arg1 = (IntVector *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntVector **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_elems = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_IntVector_1n_1elems_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  IntVector *arg1 = (IntVector *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntVector **)&jarg1;
  result = (int) ((arg1)->n_elems);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_IntVector_1elems_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  IntVector *arg1 = (IntVector *) 0 ;
  int *arg2 = (int *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntVector **)&jarg1;
  arg2 = *(int **)&jarg2;
  if (arg1) (arg1)->elems = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_IntVector_1elems_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  IntVector *arg1 = (IntVector *) 0 ;
  int *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(IntVector **)&jarg1;
  result = (int *) ((arg1)->elems);
  *(int **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1IntVector(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  IntVector *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (IntVector *)new IntVector();
  *(IntVector **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  IntVector *arg1 = (IntVector *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(IntVector **)&jarg1;
  delete arg1;
}

#endif


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1n_1mixes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_mixes = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1n_1mixes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  result = (int) ((arg1)->n_mixes);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1mixes_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  HTKMixture **arg2 = (HTKMixture **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  arg2 = *(HTKMixture ***)&jarg2;
  if (arg1) (arg1)->mixes = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1mixes_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  HTKMixture **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  result = (HTKMixture **) ((arg1)->mixes);
  *(HTKMixture ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1pool_1ind_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->pool_ind = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1pool_1ind_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  result = (int) ((arg1)->pool_ind);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1weights_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  float *arg2 = (float *) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  arg2 = *(float **)&jarg2;
  if (arg1) (arg1)->weights = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKMixtureList_1weights_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;
  float *result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKMixtureList **)&jarg1;
  result = (float *) ((arg1)->weights);
  *(float **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKMixtureList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKMixtureList *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKMixtureList *)new HTKMixtureList();
  *(HTKMixtureList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKMixtureList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKMixtureList *arg1 = (HTKMixtureList *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKMixtureList **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMStateList_1n_1states_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKHMMStateList *arg1 = (HTKHMMStateList *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMStateList **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_states = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMStateList_1n_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKHMMStateList *arg1 = (HTKHMMStateList *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMStateList **)&jarg1;
  result = (int) ((arg1)->n_states);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMStateList_1states_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKHMMStateList *arg1 = (HTKHMMStateList *) 0 ;
  HTKHMMState **arg2 = (HTKHMMState **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMStateList **)&jarg1;
  arg2 = *(HTKHMMState ***)&jarg2;
  if (arg1) (arg1)->states = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMStateList_1states_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKHMMStateList *arg1 = (HTKHMMStateList *) 0 ;
  HTKHMMState **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMStateList **)&jarg1;
  result = (HTKHMMState **) ((arg1)->states);
  *(HTKHMMState ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKHMMStateList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKHMMStateList *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKHMMStateList *)new HTKHMMStateList();
  *(HTKHMMStateList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKHMMStateList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKHMMStateList *arg1 = (HTKHMMStateList *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKHMMStateList **)&jarg1;
  delete arg1;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMList_1n_1hmms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  HTKHMMList *arg1 = (HTKHMMList *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMList **)&jarg1;
  arg2 = (int)jarg2;
  if (arg1) (arg1)->n_hmms = arg2;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMList_1n_1hmms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  HTKHMMList *arg1 = (HTKHMMList *) 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMList **)&jarg1;
  result = (int) ((arg1)->n_hmms);
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMList_1hmms_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  HTKHMMList *arg1 = (HTKHMMList *) 0 ;
  HTKHMM **arg2 = (HTKHMM **) 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMList **)&jarg1;
  arg2 = *(HTKHMM ***)&jarg2;
  if (arg1) (arg1)->hmms = arg2;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_HTKHMMList_1hmms_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  HTKHMMList *arg1 = (HTKHMMList *) 0 ;
  HTKHMM **result = 0 ;

  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(HTKHMMList **)&jarg1;
  result = (HTKHMM **) ((arg1)->hmms);
  *(HTKHMM ***)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_new_1HTKHMMList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  HTKHMMList *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (HTKHMMList *)new HTKHMMList();
  *(HTKHMMList **)&jresult = result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_delete_1HTKHMMList(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  HTKHMMList *arg1 = (HTKHMMList *) 0 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(HTKHMMList **)&jarg1;
  delete arg1;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFST_1EPSILON_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) 0;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFST_1EPSILON_1STR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (char *) "<eps>";
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jstring JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_WFST_1PHI_1STR_1get(JNIEnv *jenv, jclass jcls) {
  jstring jresult = 0 ;
  char *result = 0 ;

  (void)jenv;
  (void)jcls;
  result = (char *) "#phi";
  if(result) jresult = jenv->NewStringUTF((const char *)result);
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_NONPUSHING_1OUTLABEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) -1;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT jint JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_UNDECIDED_1OUTLABEL_1get(JNIEnv *jenv, jclass jcls) {
  jint jresult = 0 ;
  int result;

  (void)jenv;
  (void)jcls;
  result = (int) -2;
  jresult = (jint)result;
  printf(".%d.", result); return jresult;
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_writeFSMTransition_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5, jfloat jarg6) {
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  float arg6 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  arg6 = (float)jarg6;
  Juicer::writeFSMTransition(arg1,arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_writeFSMTransition_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jint jarg3, jint jarg4, jint jarg5) {
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (int)jarg3;
  arg4 = (int)jarg4;
  arg5 = (int)jarg5;
  Juicer::writeFSMTransition(arg1,arg2,arg3,arg4,arg5);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_writeFSMFinalState_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2, jfloat jarg3) {
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;
  float arg3 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1;
  arg2 = (int)jarg2;
  arg3 = (float)jarg3;
  Juicer::writeFSMFinalState(arg1,arg2,arg3);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_writeFSMFinalState_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jint jarg2) {
  FILE *arg1 = (FILE *) 0 ;
  int arg2 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1;
  arg2 = (int)jarg2;
  Juicer::writeFSMFinalState(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_writeFSMSymbol(JNIEnv *jenv, jclass jcls, jlong jarg1, jstring jarg2, jint jarg3) {
  FILE *arg1 = (FILE *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;

  (void)jenv;
  (void)jcls;
  arg1 = *(FILE **)&jarg1;
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return ;
  }
  arg3 = (int)jarg3;
  Juicer::writeFSMSymbol(arg1,(char const *)arg2,arg3);
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
}


SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGWFSTLabelPushingNetworkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::WFSTNetwork **)&baseptr = *(Juicer::WFSTLabelPushingNetwork **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGWFSTSortedInLabelNetworkUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::WFSTNetwork **)&baseptr = *(Juicer::WFSTSortedInLabelNetwork **)&jarg1;
    return baseptr;
}

#ifdef WITH_ONTHEFLY

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGWFSTLatticeOnTheFlyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::WFSTLattice **)&baseptr = *(Juicer::WFSTLatticeOnTheFly **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGDecHypOnTheFlyUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::DecHyp **)&baseptr = *(Juicer::DecHypOnTheFly **)&jarg1;
    return baseptr;
}

#endif

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGWFSTDecoderLiteUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::WFSTDecoderLite **)&baseptr = *(Juicer::WFSTDecoderLite **)&jarg1;
    return baseptr;
}

#ifdef WITH_ONTHEFLY

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGWFSTOnTheFlyDecoderUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::WFSTDecoder **)&baseptr = *(Juicer::WFSTOnTheFlyDecoder **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGWFSTModelOnTheFlyPoolUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::WFSTModelPool **)&baseptr = *(Juicer::WFSTModelOnTheFlyPool **)&jarg1;
    return baseptr;
}

#endif

#ifdef WITH_HTK

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGHModelsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::IModels **)&baseptr = *(Juicer::HModels **)&jarg1;
    return baseptr;
}

#endif

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGHTKModelsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::IModels **)&baseptr = *(Juicer::HTKModels **)&jarg1;
    return baseptr;
}

SWIGEXPORT jlong JNICALL Java_ch_idiap_producers_Projuicer_juicerJNI_SWIGHTKFlatModelsUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Juicer::HTKModels **)&baseptr = *(Juicer::HTKFlatModels **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

